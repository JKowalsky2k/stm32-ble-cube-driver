
cube_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004128  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045b0  080045b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045b8  080045b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045b8  080045b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045bc  080045bc  000145bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08004630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08004630  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a71c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e6c  00000000  00000000  0002a7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000888  00000000  00000000  0002c628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002ceb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225b0  00000000  00000000  0002d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c305  00000000  00000000  0004fc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d18  00000000  00000000  0005bf05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125c1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b10  00000000  00000000  00125c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  00128780  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001287a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080042e0 	.word	0x080042e0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080042e0 	.word	0x080042e0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d8:	2300      	movs	r3, #0
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	4b10      	ldr	r3, [pc, #64]	; (8000620 <MX_GPIO_Init+0x5c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <MX_GPIO_Init+0x5c>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <MX_GPIO_Init+0x5c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2120      	movs	r1, #32
 80005f8:	480a      	ldr	r0, [pc, #40]	; (8000624 <MX_GPIO_Init+0x60>)
 80005fa:	f000 ff83 	bl	8001504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4619      	mov	r1, r3
 8000612:	4804      	ldr	r0, [pc, #16]	; (8000624 <MX_GPIO_Init+0x60>)
 8000614:	f000 fde2 	bl	80011dc <HAL_GPIO_Init>

}
 8000618:	bf00      	nop
 800061a:	3718      	adds	r7, #24
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40023800 	.word	0x40023800
 8000624:	40020000 	.word	0x40020000

08000628 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b29a      	uxth	r2, r3
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <_write+0x28>)
 8000640:	f001 fd29 	bl	8002096 <HAL_UART_Transmit>
	return len;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000010c 	.word	0x2000010c

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000658:	f000 fbaa 	bl	8000db0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065c:	f000 f83e 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f7ff ffb0 	bl	80005c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000664:	f000 faa2 	bl	8000bac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000668:	f000 faca 	bl	8000c00 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)&msg_buffer[msg_buffer_idx++], 1);
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <main+0x70>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	1c5a      	adds	r2, r3, #1
 8000672:	b2d1      	uxtb	r1, r2
 8000674:	4a13      	ldr	r2, [pc, #76]	; (80006c4 <main+0x70>)
 8000676:	7011      	strb	r1, [r2, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b13      	ldr	r3, [pc, #76]	; (80006c8 <main+0x74>)
 800067c:	4413      	add	r3, r2
 800067e:	2201      	movs	r2, #1
 8000680:	4619      	mov	r1, r3
 8000682:	4812      	ldr	r0, [pc, #72]	; (80006cc <main+0x78>)
 8000684:	f001 fd99 	bl	80021ba <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  srand(time(NULL));
 8000688:	2000      	movs	r0, #0
 800068a:	f002 fdf9 	bl	8003280 <time>
 800068e:	4602      	mov	r2, r0
 8000690:	460b      	mov	r3, r1
 8000692:	4610      	mov	r0, r2
 8000694:	4619      	mov	r1, r3
 8000696:	f002 fd73 	bl	8003180 <srand>
  printf("strlen: %d\r\n", strlen(session_security_code));
 800069a:	480d      	ldr	r0, [pc, #52]	; (80006d0 <main+0x7c>)
 800069c:	f7ff fdb8 	bl	8000210 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4619      	mov	r1, r3
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <main+0x80>)
 80006a6:	f002 fd53 	bl	8003150 <iprintf>
  set_random_session_security_code(session_security_code, strlen(session_security_code));
 80006aa:	4809      	ldr	r0, [pc, #36]	; (80006d0 <main+0x7c>)
 80006ac:	f7ff fdb0 	bl	8000210 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4619      	mov	r1, r3
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <main+0x7c>)
 80006b6:	f000 f8e8 	bl	800088a <set_random_session_security_code>
  printf("[INFO] GENERATED SECURITY CODE: %s\r\n", session_security_code);
 80006ba:	4905      	ldr	r1, [pc, #20]	; (80006d0 <main+0x7c>)
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <main+0x84>)
 80006be:	f002 fd47 	bl	8003150 <iprintf>
  while (1)
 80006c2:	e7fe      	b.n	80006c2 <main+0x6e>
 80006c4:	200000a0 	.word	0x200000a0
 80006c8:	2000008c 	.word	0x2000008c
 80006cc:	200000c8 	.word	0x200000c8
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	080042f8 	.word	0x080042f8
 80006d8:	08004308 	.word	0x08004308

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2234      	movs	r2, #52	; 0x34
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fd28 	bl	8003140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemClock_Config+0xb8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a22      	ldr	r2, [pc, #136]	; (8000794 <SystemClock_Config+0xb8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemClock_Config+0xb8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemClock_Config+0xbc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <SystemClock_Config+0xbc>)
 800072a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <SystemClock_Config+0xbc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000738:	603b      	str	r3, [r7, #0]
 800073a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000740:	2301      	movs	r3, #1
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	2310      	movs	r3, #16
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4618      	mov	r0, r3
 8000752:	f001 f9b5 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800075c:	f000 f890 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000760:	230f      	movs	r3, #15
 8000762:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fedc 	bl	8001538 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000786:	f000 f87b 	bl	8000880 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	; 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <HAL_UART_RxCpltCallback+0xb0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d149      	bne.n	8000842 <HAL_UART_RxCpltCallback+0xa6>
	{
		if (msg_buffer_idx > MAX_MSG_LENGTH-1)
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <HAL_UART_RxCpltCallback+0xb4>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b13      	cmp	r3, #19
 80007b4:	d937      	bls.n	8000826 <HAL_UART_RxCpltCallback+0x8a>
		{
			if (0 != set_security_code_from_uart_message(msg_buffer, uart_msg_security_code, sizeof(uart_msg_security_code)))
 80007b6:	2208      	movs	r2, #8
 80007b8:	4926      	ldr	r1, [pc, #152]	; (8000854 <HAL_UART_RxCpltCallback+0xb8>)
 80007ba:	4827      	ldr	r0, [pc, #156]	; (8000858 <HAL_UART_RxCpltCallback+0xbc>)
 80007bc:	f000 f9c2 	bl	8000b44 <set_security_code_from_uart_message>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <HAL_UART_RxCpltCallback+0x32>
			{
				printf("[ERROR] Could not get < uart_msg_security_code > from UART message!");
 80007c6:	4825      	ldr	r0, [pc, #148]	; (800085c <HAL_UART_RxCpltCallback+0xc0>)
 80007c8:	f002 fcc2 	bl	8003150 <iprintf>
 80007cc:	e003      	b.n	80007d6 <HAL_UART_RxCpltCallback+0x3a>
			}
			else
			{
				printf("[INFO] uart_msg_security_code: %s\r\n", uart_msg_security_code);
 80007ce:	4921      	ldr	r1, [pc, #132]	; (8000854 <HAL_UART_RxCpltCallback+0xb8>)
 80007d0:	4823      	ldr	r0, [pc, #140]	; (8000860 <HAL_UART_RxCpltCallback+0xc4>)
 80007d2:	f002 fcbd 	bl	8003150 <iprintf>
			}
			if (0 != set_command_from_uart_message(msg_buffer, uart_msg_command, sizeof(uart_msg_command)))
 80007d6:	2202      	movs	r2, #2
 80007d8:	4922      	ldr	r1, [pc, #136]	; (8000864 <HAL_UART_RxCpltCallback+0xc8>)
 80007da:	481f      	ldr	r0, [pc, #124]	; (8000858 <HAL_UART_RxCpltCallback+0xbc>)
 80007dc:	f000 f9c2 	bl	8000b64 <set_command_from_uart_message>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <HAL_UART_RxCpltCallback+0x52>
			{
				printf("[ERROR] Could not get < uart_msg_command > from UART message!");
 80007e6:	4820      	ldr	r0, [pc, #128]	; (8000868 <HAL_UART_RxCpltCallback+0xcc>)
 80007e8:	f002 fcb2 	bl	8003150 <iprintf>
 80007ec:	e003      	b.n	80007f6 <HAL_UART_RxCpltCallback+0x5a>
			}
			else
			{
				printf("[INFO] uart_msg_command: %s\r\n", uart_msg_command);
 80007ee:	491d      	ldr	r1, [pc, #116]	; (8000864 <HAL_UART_RxCpltCallback+0xc8>)
 80007f0:	481e      	ldr	r0, [pc, #120]	; (800086c <HAL_UART_RxCpltCallback+0xd0>)
 80007f2:	f002 fcad 	bl	8003150 <iprintf>
			}
			if (0 != set_data_from_uart_message(msg_buffer, uart_msg_data, sizeof(uart_msg_data)))
 80007f6:	220a      	movs	r2, #10
 80007f8:	491d      	ldr	r1, [pc, #116]	; (8000870 <HAL_UART_RxCpltCallback+0xd4>)
 80007fa:	4817      	ldr	r0, [pc, #92]	; (8000858 <HAL_UART_RxCpltCallback+0xbc>)
 80007fc:	f000 f9c4 	bl	8000b88 <set_data_from_uart_message>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d003      	beq.n	800080e <HAL_UART_RxCpltCallback+0x72>
			{
				printf("[ERROR] Could not get < uart_msg_data > from UART message!");
 8000806:	481b      	ldr	r0, [pc, #108]	; (8000874 <HAL_UART_RxCpltCallback+0xd8>)
 8000808:	f002 fca2 	bl	8003150 <iprintf>
 800080c:	e003      	b.n	8000816 <HAL_UART_RxCpltCallback+0x7a>
			}
			else
			{
				printf("[INFO] uart_msg_data: %s\r\n", uart_msg_data);
 800080e:	4918      	ldr	r1, [pc, #96]	; (8000870 <HAL_UART_RxCpltCallback+0xd4>)
 8000810:	4819      	ldr	r0, [pc, #100]	; (8000878 <HAL_UART_RxCpltCallback+0xdc>)
 8000812:	f002 fc9d 	bl	8003150 <iprintf>
			}
			memset(msg_buffer, 0, sizeof(msg_buffer));
 8000816:	2214      	movs	r2, #20
 8000818:	2100      	movs	r1, #0
 800081a:	480f      	ldr	r0, [pc, #60]	; (8000858 <HAL_UART_RxCpltCallback+0xbc>)
 800081c:	f002 fc90 	bl	8003140 <memset>
			msg_buffer_idx = 0;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_UART_RxCpltCallback+0xb4>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&msg_buffer[msg_buffer_idx++], 1);
 8000826:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <HAL_UART_RxCpltCallback+0xb4>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	b2d1      	uxtb	r1, r2
 800082e:	4a08      	ldr	r2, [pc, #32]	; (8000850 <HAL_UART_RxCpltCallback+0xb4>)
 8000830:	7011      	strb	r1, [r2, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_UART_RxCpltCallback+0xbc>)
 8000836:	4413      	add	r3, r2
 8000838:	2201      	movs	r2, #1
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <HAL_UART_RxCpltCallback+0xe0>)
 800083e:	f001 fcbc 	bl	80021ba <HAL_UART_Receive_IT>
	}
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40011000 	.word	0x40011000
 8000850:	200000a0 	.word	0x200000a0
 8000854:	200000ac 	.word	0x200000ac
 8000858:	2000008c 	.word	0x2000008c
 800085c:	08004330 	.word	0x08004330
 8000860:	08004374 	.word	0x08004374
 8000864:	200000b4 	.word	0x200000b4
 8000868:	08004398 	.word	0x08004398
 800086c:	080043d8 	.word	0x080043d8
 8000870:	200000b8 	.word	0x200000b8
 8000874:	080043f8 	.word	0x080043f8
 8000878:	08004434 	.word	0x08004434
 800087c:	200000c8 	.word	0x200000c8

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>

0800088a <set_random_session_security_code>:
#include "security.h"

int set_random_session_security_code(char * session_security_code, size_t session_security_code_length)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	b088      	sub	sp, #32
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
 8000892:	6039      	str	r1, [r7, #0]
	uint8_t repetitions[16];
	memset(repetitions, 0, sizeof(repetitions));
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	2210      	movs	r2, #16
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fc4f 	bl	8003140 <memset>
	for (uint8_t idx = 0; idx < 8; idx++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	77fb      	strb	r3, [r7, #31]
 80008a6:	e02d      	b.n	8000904 <set_random_session_security_code+0x7a>
	{
		uint8_t random_number = rand()%16;
 80008a8:	f002 fc98 	bl	80031dc <rand>
 80008ac:	4603      	mov	r3, r0
 80008ae:	425a      	negs	r2, r3
 80008b0:	f003 030f 	and.w	r3, r3, #15
 80008b4:	f002 020f 	and.w	r2, r2, #15
 80008b8:	bf58      	it	pl
 80008ba:	4253      	negpl	r3, r2
 80008bc:	77bb      	strb	r3, [r7, #30]
		while (repetitions[random_number] == 1)
 80008be:	e00a      	b.n	80008d6 <set_random_session_security_code+0x4c>
		{
			random_number = rand()%16;
 80008c0:	f002 fc8c 	bl	80031dc <rand>
 80008c4:	4603      	mov	r3, r0
 80008c6:	425a      	negs	r2, r3
 80008c8:	f003 030f 	and.w	r3, r3, #15
 80008cc:	f002 020f 	and.w	r2, r2, #15
 80008d0:	bf58      	it	pl
 80008d2:	4253      	negpl	r3, r2
 80008d4:	77bb      	strb	r3, [r7, #30]
		while (repetitions[random_number] == 1)
 80008d6:	7fbb      	ldrb	r3, [r7, #30]
 80008d8:	3320      	adds	r3, #32
 80008da:	443b      	add	r3, r7
 80008dc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d0ed      	beq.n	80008c0 <set_random_session_security_code+0x36>
		}
		repetitions[random_number] = 1;
 80008e4:	7fbb      	ldrb	r3, [r7, #30]
 80008e6:	3320      	adds	r3, #32
 80008e8:	443b      	add	r3, r7
 80008ea:	2201      	movs	r2, #1
 80008ec:	f803 2c14 	strb.w	r2, [r3, #-20]
		session_security_code[idx] = random_number+65;
 80008f0:	7ffb      	ldrb	r3, [r7, #31]
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	7fba      	ldrb	r2, [r7, #30]
 80008f8:	3241      	adds	r2, #65	; 0x41
 80008fa:	b2d2      	uxtb	r2, r2
 80008fc:	701a      	strb	r2, [r3, #0]
	for (uint8_t idx = 0; idx < 8; idx++)
 80008fe:	7ffb      	ldrb	r3, [r7, #31]
 8000900:	3301      	adds	r3, #1
 8000902:	77fb      	strb	r3, [r7, #31]
 8000904:	7ffb      	ldrb	r3, [r7, #31]
 8000906:	2b07      	cmp	r3, #7
 8000908:	d9ce      	bls.n	80008a8 <set_random_session_security_code+0x1e>
	}
	return 0;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <MemManage_Handler+0x4>

08000976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <BusFault_Handler+0x4>

0800097c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <UsageFault_Handler+0x4>

08000982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b0:	f000 fa50 	bl	8000e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <USART1_IRQHandler+0x10>)
 80009be:	f001 fc2d 	bl	800221c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000c8 	.word	0x200000c8

080009cc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	return 1;
 80009d0:	2301      	movs	r3, #1
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_kill>:

int _kill(int pid, int sig)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80009e6:	f002 fb81 	bl	80030ec <__errno>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2216      	movs	r2, #22
 80009ee:	601a      	str	r2, [r3, #0]
	return -1;
 80009f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_exit>:

void _exit (int status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ffe7 	bl	80009dc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a0e:	e7fe      	b.n	8000a0e <_exit+0x12>

08000a10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
	}

return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
	return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	; (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f002 fb02 	bl	80030ec <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20020000 	.word	0x20020000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	200000c4 	.word	0x200000c4
 8000b1c:	20000168 	.word	0x20000168

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <set_security_code_from_uart_message>:
#define DATA_START_IN_UART_MESSAGE 10

int set_security_code_from_uart_message(const char * uart_message_buffer,
										char * destination_buffer,
										size_t destination_buffer_length)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
	strncpy(destination_buffer, uart_message_buffer, destination_buffer_length);
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	68f9      	ldr	r1, [r7, #12]
 8000b54:	68b8      	ldr	r0, [r7, #8]
 8000b56:	f002 fb7f 	bl	8003258 <strncpy>
	return 0;
 8000b5a:	2300      	movs	r3, #0
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <set_command_from_uart_message>:

int set_command_from_uart_message(	const char * uart_message_buffer,
									char * destination_buffer,
									size_t destination_buffer_length)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
	strncpy(destination_buffer, uart_message_buffer+COMMAND_START_IN_UART_MESSAGE, destination_buffer_length);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3308      	adds	r3, #8
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4619      	mov	r1, r3
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f002 fb6d 	bl	8003258 <strncpy>
	return 0;
 8000b7e:	2300      	movs	r3, #0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <set_data_from_uart_message>:

int set_data_from_uart_message(	const char * uart_message_buffer,
								char * destination_buffer,
								size_t destination_buffer_length)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	strncpy(destination_buffer, uart_message_buffer+DATA_START_IN_UART_MESSAGE, destination_buffer_length);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	330a      	adds	r3, #10
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f002 fb5b 	bl	8003258 <strncpy>
	return 0;
 8000ba2:	2300      	movs	r3, #0
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f001 fa0a 	bl	8001ffc <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f7ff fe47 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000c8 	.word	0x200000c8
 8000bfc:	40011000 	.word	0x40011000

08000c00 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c06:	4a12      	ldr	r2, [pc, #72]	; (8000c50 <MX_USART2_UART_Init+0x50>)
 8000c08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c0a:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_USART2_UART_Init+0x4c>)
 8000c38:	f001 f9e0 	bl	8001ffc <HAL_UART_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c42:	f7ff fe1d 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000010c 	.word	0x2000010c
 8000c50:	40004400 	.word	0x40004400

08000c54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08c      	sub	sp, #48	; 0x30
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a36      	ldr	r2, [pc, #216]	; (8000d4c <HAL_UART_MspInit+0xf8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d135      	bne.n	8000ce2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c80:	f043 0310 	orr.w	r3, r3, #16
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f003 0310 	and.w	r3, r3, #16
 8000c8e:	61bb      	str	r3, [r7, #24]
 8000c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cc0:	2307      	movs	r3, #7
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4822      	ldr	r0, [pc, #136]	; (8000d54 <HAL_UART_MspInit+0x100>)
 8000ccc:	f000 fa86 	bl	80011dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2025      	movs	r0, #37	; 0x25
 8000cd6:	f000 f9b8 	bl	800104a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cda:	2025      	movs	r0, #37	; 0x25
 8000cdc:	f000 f9d1 	bl	8001082 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ce0:	e030      	b.n	8000d44 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_UART_MspInit+0x104>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d12b      	bne.n	8000d44 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_UART_MspInit+0xfc>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d24:	230c      	movs	r3, #12
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d30:	2303      	movs	r3, #3
 8000d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d34:	2307      	movs	r3, #7
 8000d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <HAL_UART_MspInit+0x100>)
 8000d40:	f000 fa4c 	bl	80011dc <HAL_GPIO_Init>
}
 8000d44:	bf00      	nop
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40011000 	.word	0x40011000
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40004400 	.word	0x40004400

08000d5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d62:	490e      	ldr	r1, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d64:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d78:	4c0b      	ldr	r4, [pc, #44]	; (8000da8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d86:	f7ff fecb 	bl	8000b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d8a:	f002 f9b5 	bl	80030f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8e:	f7ff fc61 	bl	8000654 <main>
  bx  lr    
 8000d92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000da0:	080045c0 	.word	0x080045c0
  ldr r2, =_sbss
 8000da4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000da8:	20000164 	.word	0x20000164

08000dac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dac:	e7fe      	b.n	8000dac <ADC_IRQHandler>
	...

08000db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db4:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_Init+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <HAL_Init+0x40>)
 8000dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_Init+0x40>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_Init+0x40>)
 8000dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_Init+0x40>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_Init+0x40>)
 8000dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f92b 	bl	8001034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dde:	200f      	movs	r0, #15
 8000de0:	f000 f808 	bl	8000df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de4:	f7ff fd96 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40023c00 	.word	0x40023c00

08000df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x54>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b12      	ldr	r3, [pc, #72]	; (8000e4c <HAL_InitTick+0x58>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4619      	mov	r1, r3
 8000e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f943 	bl	800109e <HAL_SYSTICK_Config>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00e      	b.n	8000e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2b0f      	cmp	r3, #15
 8000e26:	d80a      	bhi.n	8000e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f000 f90b 	bl	800104a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e34:	4a06      	ldr	r2, [pc, #24]	; (8000e50 <HAL_InitTick+0x5c>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	e000      	b.n	8000e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000000 	.word	0x20000000
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x20>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <HAL_IncTick+0x24>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <HAL_IncTick+0x24>)
 8000e66:	6013      	str	r3, [r2, #0]
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000150 	.word	0x20000150

08000e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b03      	ldr	r3, [pc, #12]	; (8000e90 <HAL_GetTick+0x14>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000150 	.word	0x20000150

08000e94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ea4:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ec6:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	60d3      	str	r3, [r2, #12]
}
 8000ecc:	bf00      	nop
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	0a1b      	lsrs	r3, r3, #8
 8000ee6:	f003 0307 	and.w	r3, r3, #7
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	db0b      	blt.n	8000f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 021f 	and.w	r2, r3, #31
 8000f10:	4907      	ldr	r1, [pc, #28]	; (8000f30 <__NVIC_EnableIRQ+0x38>)
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	095b      	lsrs	r3, r3, #5
 8000f18:	2001      	movs	r0, #1
 8000f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	6039      	str	r1, [r7, #0]
 8000f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	db0a      	blt.n	8000f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	490c      	ldr	r1, [pc, #48]	; (8000f80 <__NVIC_SetPriority+0x4c>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	0112      	lsls	r2, r2, #4
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	440b      	add	r3, r1
 8000f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f5c:	e00a      	b.n	8000f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	b2da      	uxtb	r2, r3
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <__NVIC_SetPriority+0x50>)
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	3b04      	subs	r3, #4
 8000f6c:	0112      	lsls	r2, r2, #4
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	440b      	add	r3, r1
 8000f72:	761a      	strb	r2, [r3, #24]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	; 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	60f8      	str	r0, [r7, #12]
 8000f90:	60b9      	str	r1, [r7, #8]
 8000f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f1c3 0307 	rsb	r3, r3, #7
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	bf28      	it	cs
 8000fa6:	2304      	movcs	r3, #4
 8000fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3304      	adds	r3, #4
 8000fae:	2b06      	cmp	r3, #6
 8000fb0:	d902      	bls.n	8000fb8 <NVIC_EncodePriority+0x30>
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3b03      	subs	r3, #3
 8000fb6:	e000      	b.n	8000fba <NVIC_EncodePriority+0x32>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	401a      	ands	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	4313      	orrs	r3, r2
         );
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3724      	adds	r7, #36	; 0x24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001000:	d301      	bcc.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e00f      	b.n	8001026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <SysTick_Config+0x40>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3b01      	subs	r3, #1
 800100c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	210f      	movs	r1, #15
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	f7ff ff8e 	bl	8000f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <SysTick_Config+0x40>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <SysTick_Config+0x40>)
 8001020:	2207      	movs	r2, #7
 8001022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ff29 	bl	8000e94 <__NVIC_SetPriorityGrouping>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104a:	b580      	push	{r7, lr}
 800104c:	b086      	sub	sp, #24
 800104e:	af00      	add	r7, sp, #0
 8001050:	4603      	mov	r3, r0
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
 8001056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800105c:	f7ff ff3e 	bl	8000edc <__NVIC_GetPriorityGrouping>
 8001060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	6978      	ldr	r0, [r7, #20]
 8001068:	f7ff ff8e 	bl	8000f88 <NVIC_EncodePriority>
 800106c:	4602      	mov	r2, r0
 800106e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001072:	4611      	mov	r1, r2
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff5d 	bl	8000f34 <__NVIC_SetPriority>
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff31 	bl	8000ef8 <__NVIC_EnableIRQ>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffa2 	bl	8000ff0 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b084      	sub	sp, #16
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff feda 	bl	8000e7c <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d008      	beq.n	80010e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2280      	movs	r2, #128	; 0x80
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e052      	b.n	800118e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0216 	bic.w	r2, r2, #22
 80010f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	695a      	ldr	r2, [r3, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001106:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <HAL_DMA_Abort+0x62>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001114:	2b00      	cmp	r3, #0
 8001116:	d007      	beq.n	8001128 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0208 	bic.w	r2, r2, #8
 8001126:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001138:	e013      	b.n	8001162 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800113a:	f7ff fe9f 	bl	8000e7c <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b05      	cmp	r3, #5
 8001146:	d90c      	bls.n	8001162 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2220      	movs	r2, #32
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2203      	movs	r2, #3
 8001152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e015      	b.n	800118e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e4      	bne.n	800113a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001174:	223f      	movs	r2, #63	; 0x3f
 8001176:	409a      	lsls	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d004      	beq.n	80011b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e00c      	b.n	80011ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2205      	movs	r2, #5
 80011b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e165      	b.n	80014c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	429a      	cmp	r2, r3
 8001212:	f040 8154 	bne.w	80014be <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122a:	2b02      	cmp	r3, #2
 800122c:	d130      	bne.n	8001290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	68da      	ldr	r2, [r3, #12]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 0201 	and.w	r2, r3, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b03      	cmp	r3, #3
 800129a:	d017      	beq.n	80012cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d123      	bne.n	8001320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	08da      	lsrs	r2, r3, #3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3208      	adds	r2, #8
 80012e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	f003 0307 	and.w	r3, r3, #7
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	691a      	ldr	r2, [r3, #16]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	69b9      	ldr	r1, [r7, #24]
 800131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	2203      	movs	r2, #3
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0203 	and.w	r2, r3, #3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 80ae 	beq.w	80014be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <HAL_GPIO_Init+0x300>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <HAL_GPIO_Init+0x300>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800137e:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <HAL_GPIO_Init+0x304>)
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	220f      	movs	r2, #15
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4013      	ands	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a4f      	ldr	r2, [pc, #316]	; (80014e4 <HAL_GPIO_Init+0x308>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d025      	beq.n	80013f6 <HAL_GPIO_Init+0x21a>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <HAL_GPIO_Init+0x30c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d01f      	beq.n	80013f2 <HAL_GPIO_Init+0x216>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x310>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d019      	beq.n	80013ee <HAL_GPIO_Init+0x212>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a4c      	ldr	r2, [pc, #304]	; (80014f0 <HAL_GPIO_Init+0x314>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_GPIO_Init+0x20e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4b      	ldr	r2, [pc, #300]	; (80014f4 <HAL_GPIO_Init+0x318>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00d      	beq.n	80013e6 <HAL_GPIO_Init+0x20a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4a      	ldr	r2, [pc, #296]	; (80014f8 <HAL_GPIO_Init+0x31c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d007      	beq.n	80013e2 <HAL_GPIO_Init+0x206>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a49      	ldr	r2, [pc, #292]	; (80014fc <HAL_GPIO_Init+0x320>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d101      	bne.n	80013de <HAL_GPIO_Init+0x202>
 80013da:	2306      	movs	r3, #6
 80013dc:	e00c      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013de:	2307      	movs	r3, #7
 80013e0:	e00a      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013e2:	2305      	movs	r3, #5
 80013e4:	e008      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e006      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013ea:	2303      	movs	r3, #3
 80013ec:	e004      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013ee:	2302      	movs	r3, #2
 80013f0:	e002      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_GPIO_Init+0x21c>
 80013f6:	2300      	movs	r3, #0
 80013f8:	69fa      	ldr	r2, [r7, #28]
 80013fa:	f002 0203 	and.w	r2, r2, #3
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	4093      	lsls	r3, r2
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001408:	4935      	ldr	r1, [pc, #212]	; (80014e0 <HAL_GPIO_Init+0x304>)
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	089b      	lsrs	r3, r3, #2
 800140e:	3302      	adds	r3, #2
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001416:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	43db      	mvns	r3, r3
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	4013      	ands	r3, r2
 8001424:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800143a:	4a31      	ldr	r2, [pc, #196]	; (8001500 <HAL_GPIO_Init+0x324>)
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d003      	beq.n	8001464 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001464:	4a26      	ldr	r2, [pc, #152]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800146a:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_GPIO_Init+0x324>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <HAL_GPIO_Init+0x324>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b8:	4a11      	ldr	r2, [pc, #68]	; (8001500 <HAL_GPIO_Init+0x324>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3301      	adds	r3, #1
 80014c2:	61fb      	str	r3, [r7, #28]
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	f67f ae96 	bls.w	80011f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014cc:	bf00      	nop
 80014ce:	bf00      	nop
 80014d0:	3724      	adds	r7, #36	; 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40021400 	.word	0x40021400
 80014fc:	40021800 	.word	0x40021800
 8001500:	40013c00 	.word	0x40013c00

08001504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
 8001510:	4613      	mov	r3, r2
 8001512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001514:	787b      	ldrb	r3, [r7, #1]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001520:	e003      	b.n	800152a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	041a      	lsls	r2, r3, #16
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	619a      	str	r2, [r3, #24]
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0cc      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d90c      	bls.n	8001574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b65      	ldr	r3, [pc, #404]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0b8      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800158c:	4b59      	ldr	r3, [pc, #356]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a58      	ldr	r2, [pc, #352]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	494d      	ldr	r1, [pc, #308]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d044      	beq.n	8001658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e07f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e06f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b3b      	ldr	r3, [pc, #236]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e067      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001616:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 0203 	bic.w	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4934      	ldr	r1, [pc, #208]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001628:	f7ff fc28 	bl	8000e7c <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e00a      	b.n	8001646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff fc24 	bl	8000e7c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	; 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e04f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 020c 	and.w	r2, r3, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	429a      	cmp	r2, r3
 8001656:	d1eb      	bne.n	8001630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001658:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d20c      	bcs.n	8001680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e032      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4916      	ldr	r1, [pc, #88]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016aa:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	490e      	ldr	r1, [pc, #56]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016be:	f000 f855 	bl	800176c <HAL_RCC_GetSysClockFreq>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	490a      	ldr	r1, [pc, #40]	; (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	5ccb      	ldrb	r3, [r1, r3]
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fb88 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	08004450 	.word	0x08004450
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b03      	ldr	r3, [pc, #12]	; (8001718 <HAL_RCC_GetHCLKFreq+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000

0800171c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001720:	f7ff fff0 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	; (8001740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	08004460 	.word	0x08004460

08001744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001748:	f7ff ffdc 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	0b5b      	lsrs	r3, r3, #13
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	; (8001768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	08004460 	.word	0x08004460

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b0a6      	sub	sp, #152	; 0x98
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001792:	4bc8      	ldr	r3, [pc, #800]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b0c      	cmp	r3, #12
 800179c:	f200 817e 	bhi.w	8001a9c <HAL_RCC_GetSysClockFreq+0x330>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	08001a9d 	.word	0x08001a9d
 80017b0:	08001a9d 	.word	0x08001a9d
 80017b4:	08001a9d 	.word	0x08001a9d
 80017b8:	080017e5 	.word	0x080017e5
 80017bc:	08001a9d 	.word	0x08001a9d
 80017c0:	08001a9d 	.word	0x08001a9d
 80017c4:	08001a9d 	.word	0x08001a9d
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	08001a9d 	.word	0x08001a9d
 80017d0:	08001a9d 	.word	0x08001a9d
 80017d4:	08001a9d 	.word	0x08001a9d
 80017d8:	08001957 	.word	0x08001957
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4bb6      	ldr	r3, [pc, #728]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x34c>)
 80017de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80017e2:	e15f      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4bb5      	ldr	r3, [pc, #724]	; (8001abc <HAL_RCC_GetSysClockFreq+0x350>)
 80017e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80017ea:	e15b      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4bb1      	ldr	r3, [pc, #708]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f8:	4bae      	ldr	r3, [pc, #696]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d031      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4bab      	ldr	r3, [pc, #684]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	66bb      	str	r3, [r7, #104]	; 0x68
 800180e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001816:	663b      	str	r3, [r7, #96]	; 0x60
 8001818:	2300      	movs	r3, #0
 800181a:	667b      	str	r3, [r7, #100]	; 0x64
 800181c:	4ba7      	ldr	r3, [pc, #668]	; (8001abc <HAL_RCC_GetSysClockFreq+0x350>)
 800181e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001822:	462a      	mov	r2, r5
 8001824:	fb03 f202 	mul.w	r2, r3, r2
 8001828:	2300      	movs	r3, #0
 800182a:	4621      	mov	r1, r4
 800182c:	fb01 f303 	mul.w	r3, r1, r3
 8001830:	4413      	add	r3, r2
 8001832:	4aa2      	ldr	r2, [pc, #648]	; (8001abc <HAL_RCC_GetSysClockFreq+0x350>)
 8001834:	4621      	mov	r1, r4
 8001836:	fba1 1202 	umull	r1, r2, r1, r2
 800183a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800183c:	460a      	mov	r2, r1
 800183e:	67ba      	str	r2, [r7, #120]	; 0x78
 8001840:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001842:	4413      	add	r3, r2
 8001844:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800184a:	2200      	movs	r2, #0
 800184c:	65bb      	str	r3, [r7, #88]	; 0x58
 800184e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001850:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001854:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001858:	f7fe fd32 	bl	80002c0 <__aeabi_uldivmod>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4613      	mov	r3, r2
 8001862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001866:	e064      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b92      	ldr	r3, [pc, #584]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	653b      	str	r3, [r7, #80]	; 0x50
 8001872:	657a      	str	r2, [r7, #84]	; 0x54
 8001874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
 800187c:	2300      	movs	r3, #0
 800187e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001880:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001884:	4622      	mov	r2, r4
 8001886:	462b      	mov	r3, r5
 8001888:	f04f 0000 	mov.w	r0, #0
 800188c:	f04f 0100 	mov.w	r1, #0
 8001890:	0159      	lsls	r1, r3, #5
 8001892:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001896:	0150      	lsls	r0, r2, #5
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4621      	mov	r1, r4
 800189e:	1a51      	subs	r1, r2, r1
 80018a0:	6139      	str	r1, [r7, #16]
 80018a2:	4629      	mov	r1, r5
 80018a4:	eb63 0301 	sbc.w	r3, r3, r1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b6:	4659      	mov	r1, fp
 80018b8:	018b      	lsls	r3, r1, #6
 80018ba:	4651      	mov	r1, sl
 80018bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c0:	4651      	mov	r1, sl
 80018c2:	018a      	lsls	r2, r1, #6
 80018c4:	4651      	mov	r1, sl
 80018c6:	ebb2 0801 	subs.w	r8, r2, r1
 80018ca:	4659      	mov	r1, fp
 80018cc:	eb63 0901 	sbc.w	r9, r3, r1
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e4:	4690      	mov	r8, r2
 80018e6:	4699      	mov	r9, r3
 80018e8:	4623      	mov	r3, r4
 80018ea:	eb18 0303 	adds.w	r3, r8, r3
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	462b      	mov	r3, r5
 80018f2:	eb49 0303 	adc.w	r3, r9, r3
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001904:	4629      	mov	r1, r5
 8001906:	028b      	lsls	r3, r1, #10
 8001908:	4621      	mov	r1, r4
 800190a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800190e:	4621      	mov	r1, r4
 8001910:	028a      	lsls	r2, r1, #10
 8001912:	4610      	mov	r0, r2
 8001914:	4619      	mov	r1, r3
 8001916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800191a:	2200      	movs	r2, #0
 800191c:	643b      	str	r3, [r7, #64]	; 0x40
 800191e:	647a      	str	r2, [r7, #68]	; 0x44
 8001920:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001924:	f7fe fccc 	bl	80002c0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001932:	4b60      	ldr	r3, [pc, #384]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	0c1b      	lsrs	r3, r3, #16
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	3301      	adds	r3, #1
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8001944:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001954:	e0a6      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001956:	4b57      	ldr	r3, [pc, #348]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800195e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001962:	4b54      	ldr	r3, [pc, #336]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d02a      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800196e:	4b51      	ldr	r3, [pc, #324]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	099b      	lsrs	r3, r3, #6
 8001974:	2200      	movs	r2, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
 8001978:	63fa      	str	r2, [r7, #60]	; 0x3c
 800197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800197c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001980:	2100      	movs	r1, #0
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <HAL_RCC_GetSysClockFreq+0x350>)
 8001984:	fb03 f201 	mul.w	r2, r3, r1
 8001988:	2300      	movs	r3, #0
 800198a:	fb00 f303 	mul.w	r3, r0, r3
 800198e:	4413      	add	r3, r2
 8001990:	4a4a      	ldr	r2, [pc, #296]	; (8001abc <HAL_RCC_GetSysClockFreq+0x350>)
 8001992:	fba0 1202 	umull	r1, r2, r0, r2
 8001996:	677a      	str	r2, [r7, #116]	; 0x74
 8001998:	460a      	mov	r2, r1
 800199a:	673a      	str	r2, [r7, #112]	; 0x70
 800199c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800199e:	4413      	add	r3, r2
 80019a0:	677b      	str	r3, [r7, #116]	; 0x74
 80019a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019a6:	2200      	movs	r2, #0
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
 80019aa:	637a      	str	r2, [r7, #52]	; 0x34
 80019ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80019b0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80019b4:	f7fe fc84 	bl	80002c0 <__aeabi_uldivmod>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4613      	mov	r3, r2
 80019be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80019c2:	e05b      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019c4:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	099b      	lsrs	r3, r3, #6
 80019ca:	2200      	movs	r2, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
 80019dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019e0:	4642      	mov	r2, r8
 80019e2:	464b      	mov	r3, r9
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	0159      	lsls	r1, r3, #5
 80019ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019f2:	0150      	lsls	r0, r2, #5
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4641      	mov	r1, r8
 80019fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80019fe:	4649      	mov	r1, r9
 8001a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a04:	f04f 0200 	mov.w	r2, #0
 8001a08:	f04f 0300 	mov.w	r3, #0
 8001a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a18:	ebb2 040a 	subs.w	r4, r2, sl
 8001a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	00eb      	lsls	r3, r5, #3
 8001a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a2e:	00e2      	lsls	r2, r4, #3
 8001a30:	4614      	mov	r4, r2
 8001a32:	461d      	mov	r5, r3
 8001a34:	4643      	mov	r3, r8
 8001a36:	18e3      	adds	r3, r4, r3
 8001a38:	603b      	str	r3, [r7, #0]
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	eb45 0303 	adc.w	r3, r5, r3
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	f04f 0300 	mov.w	r3, #0
 8001a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a4e:	4629      	mov	r1, r5
 8001a50:	028b      	lsls	r3, r1, #10
 8001a52:	4621      	mov	r1, r4
 8001a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a58:	4621      	mov	r1, r4
 8001a5a:	028a      	lsls	r2, r1, #10
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a64:	2200      	movs	r2, #0
 8001a66:	61bb      	str	r3, [r7, #24]
 8001a68:	61fa      	str	r2, [r7, #28]
 8001a6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a6e:	f7fe fc27 	bl	80002c0 <__aeabi_uldivmod>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4613      	mov	r3, r2
 8001a78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	0f1b      	lsrs	r3, r3, #28
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8001a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001a8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001a9a:	e003      	b.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001aa2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3798      	adds	r7, #152	; 0x98
 8001aac:	46bd      	mov	sp, r7
 8001aae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	017d7840 	.word	0x017d7840

08001ac0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e28d      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8083 	beq.w	8001be6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001ae0:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d019      	beq.n	8001b20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aec:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001af8:	4b8e      	ldr	r3, [pc, #568]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b04:	d00c      	beq.n	8001b20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001b0e:	2b0c      	cmp	r3, #12
 8001b10:	d112      	bne.n	8001b38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b12:	4b88      	ldr	r3, [pc, #544]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b1e:	d10b      	bne.n	8001b38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b20:	4b84      	ldr	r3, [pc, #528]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d05b      	beq.n	8001be4 <HAL_RCC_OscConfig+0x124>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d157      	bne.n	8001be4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e25a      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d106      	bne.n	8001b50 <HAL_RCC_OscConfig+0x90>
 8001b42:	4b7c      	ldr	r3, [pc, #496]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7b      	ldr	r2, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e01d      	b.n	8001b8c <HAL_RCC_OscConfig+0xcc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0xb4>
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	e00b      	b.n	8001b8c <HAL_RCC_OscConfig+0xcc>
 8001b74:	4b6f      	ldr	r3, [pc, #444]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6e      	ldr	r2, [pc, #440]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a6b      	ldr	r2, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f972 	bl	8000e7c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9c:	f7ff f96e 	bl	8000e7c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b64      	cmp	r3, #100	; 0x64
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e21f      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0xdc>
 8001bba:	e014      	b.n	8001be6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7ff f95e 	bl	8000e7c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff f95a 	bl	8000e7c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e20b      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x104>
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d06f      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001bf2:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d017      	beq.n	8001c2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001bfe:	4b4d      	ldr	r3, [pc, #308]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d105      	bne.n	8001c16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c0a:	4b4a      	ldr	r3, [pc, #296]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c16:	4b47      	ldr	r3, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d11c      	bne.n	8001c5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c22:	4b44      	ldr	r3, [pc, #272]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d116      	bne.n	8001c5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_RCC_OscConfig+0x186>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d001      	beq.n	8001c46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e1d3      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4937      	ldr	r1, [pc, #220]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	e03a      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c64:	4b34      	ldr	r3, [pc, #208]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff f907 	bl	8000e7c <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c72:	f7ff f903 	bl	8000e7c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1b4      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0302 	and.w	r3, r3, #2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	4925      	ldr	r1, [pc, #148]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_RCC_OscConfig+0x278>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7ff f8e6 	bl	8000e7c <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7ff f8e2 	bl	8000e7c <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e193      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d036      	beq.n	8001d4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d016      	beq.n	8001d14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	2201      	movs	r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff f8c6 	bl	8000e7c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f8c2 	bl	8000e7c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e173      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d06:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x234>
 8001d12:	e01b      	b.n	8001d4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x27c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f8af 	bl	8000e7c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d20:	e00e      	b.n	8001d40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d22:	f7ff f8ab 	bl	8000e7c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d907      	bls.n	8001d40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e15c      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	42470000 	.word	0x42470000
 8001d3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d40:	4b8a      	ldr	r3, [pc, #552]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ea      	bne.n	8001d22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8097 	beq.w	8001e88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d5e:	4b83      	ldr	r3, [pc, #524]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10f      	bne.n	8001d8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b7f      	ldr	r3, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a7e      	ldr	r2, [pc, #504]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b7c      	ldr	r3, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d86:	2301      	movs	r3, #1
 8001d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b79      	ldr	r3, [pc, #484]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d118      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d96:	4b76      	ldr	r3, [pc, #472]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a75      	ldr	r2, [pc, #468]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001da2:	f7ff f86b 	bl	8000e7c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001daa:	f7ff f867 	bl	8000e7c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e118      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x4b0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d106      	bne.n	8001dde <HAL_RCC_OscConfig+0x31e>
 8001dd0:	4b66      	ldr	r3, [pc, #408]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	4a65      	ldr	r2, [pc, #404]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	; 0x70
 8001ddc:	e01c      	b.n	8001e18 <HAL_RCC_OscConfig+0x358>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b05      	cmp	r3, #5
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x340>
 8001de6:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dea:	4a60      	ldr	r2, [pc, #384]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6713      	str	r3, [r2, #112]	; 0x70
 8001df2:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df6:	4a5d      	ldr	r2, [pc, #372]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfe:	e00b      	b.n	8001e18 <HAL_RCC_OscConfig+0x358>
 8001e00:	4b5a      	ldr	r3, [pc, #360]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e04:	4a59      	ldr	r2, [pc, #356]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e06:	f023 0301 	bic.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0c:	4b57      	ldr	r3, [pc, #348]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e10:	4a56      	ldr	r2, [pc, #344]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e12:	f023 0304 	bic.w	r3, r3, #4
 8001e16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d015      	beq.n	8001e4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f82c 	bl	8000e7c <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff f828 	bl	8000e7c <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0d7      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3e:	4b4b      	ldr	r3, [pc, #300]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0ee      	beq.n	8001e28 <HAL_RCC_OscConfig+0x368>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff f816 	bl	8000e7c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7ff f812 	bl	8000e7c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e0c1      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6a:	4b40      	ldr	r3, [pc, #256]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1ee      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e76:	7dfb      	ldrb	r3, [r7, #23]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d105      	bne.n	8001e88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7c:	4b3b      	ldr	r3, [pc, #236]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a3a      	ldr	r2, [pc, #232]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 80ad 	beq.w	8001fec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e92:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d060      	beq.n	8001f60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d145      	bne.n	8001f32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <HAL_RCC_OscConfig+0x4b4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ffe6 	bl	8000e7c <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe ffe2 	bl	8000e7c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e093      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b29      	ldr	r3, [pc, #164]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69da      	ldr	r2, [r3, #28]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	019b      	lsls	r3, r3, #6
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	041b      	lsls	r3, r3, #16
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	061b      	lsls	r3, r3, #24
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	071b      	lsls	r3, r3, #28
 8001efe:	491b      	ldr	r1, [pc, #108]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f04:	4b1b      	ldr	r3, [pc, #108]	; (8001f74 <HAL_RCC_OscConfig+0x4b4>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0a:	f7fe ffb7 	bl	8000e7c <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe ffb3 	bl	8000e7c <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e064      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x452>
 8001f30:	e05c      	b.n	8001fec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x4b4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7fe ffa0 	bl	8000e7c <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f40:	f7fe ff9c 	bl	8000e7c <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e04d      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_OscConfig+0x4ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x480>
 8001f5e:	e045      	b.n	8001fec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d107      	bne.n	8001f78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e040      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40007000 	.word	0x40007000
 8001f74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f78:	4b1f      	ldr	r3, [pc, #124]	; (8001ff8 <HAL_RCC_OscConfig+0x538>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d030      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d129      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d122      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fa8:	4013      	ands	r3, r2
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d119      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d10f      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d107      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e000      	b.n	8001fee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d101      	bne.n	800200e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e03f      	b.n	800208e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7fe fe16 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2224      	movs	r2, #36	; 0x24
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800203e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 fddf 	bl	8002c04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002054:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	695a      	ldr	r2, [r3, #20]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002064:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002074:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2220      	movs	r2, #32
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2220      	movs	r2, #32
 8002088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b08a      	sub	sp, #40	; 0x28
 800209a:	af02      	add	r7, sp, #8
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d17c      	bne.n	80021b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <HAL_UART_Transmit+0x2c>
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e075      	b.n	80021b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_UART_Transmit+0x3e>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e06e      	b.n	80021b2 <HAL_UART_Transmit+0x11c>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2221      	movs	r2, #33	; 0x21
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020ea:	f7fe fec7 	bl	8000e7c <HAL_GetTick>
 80020ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	88fa      	ldrh	r2, [r7, #6]
 80020f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	88fa      	ldrh	r2, [r7, #6]
 80020fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002104:	d108      	bne.n	8002118 <HAL_UART_Transmit+0x82>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d104      	bne.n	8002118 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800210e:	2300      	movs	r3, #0
 8002110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	61bb      	str	r3, [r7, #24]
 8002116:	e003      	b.n	8002120 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002128:	e02a      	b.n	8002180 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fb1f 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e036      	b.n	80021b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10b      	bne.n	8002162 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	3302      	adds	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	e007      	b.n	8002172 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	3301      	adds	r3, #1
 8002170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1cf      	bne.n	800212a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2200      	movs	r2, #0
 8002192:	2140      	movs	r1, #64	; 0x40
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 faef 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e006      	b.n	80021b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	e000      	b.n	80021b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
  }
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b084      	sub	sp, #16
 80021be:	af00      	add	r7, sp, #0
 80021c0:	60f8      	str	r0, [r7, #12]
 80021c2:	60b9      	str	r1, [r7, #8]
 80021c4:	4613      	mov	r3, r2
 80021c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d11d      	bne.n	8002210 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <HAL_UART_Receive_IT+0x26>
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e016      	b.n	8002212 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_UART_Receive_IT+0x38>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e00f      	b.n	8002212 <HAL_UART_Receive_IT+0x58>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	461a      	mov	r2, r3
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fb24 	bl	8002854 <UART_Start_Receive_IT>
 800220c:	4603      	mov	r3, r0
 800220e:	e000      	b.n	8002212 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0ba      	sub	sp, #232	; 0xe8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002248:	2300      	movs	r3, #0
 800224a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800224e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800225a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <HAL_UART_IRQHandler+0x66>
 800226e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002272:	f003 0320 	and.w	r3, r3, #32
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fc07 	bl	8002a8e <UART_Receive_IT>
      return;
 8002280:	e256      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002282:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80de 	beq.w	8002448 <HAL_UART_IRQHandler+0x22c>
 800228c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800229c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80d1 	beq.w	8002448 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80022a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00b      	beq.n	80022ca <HAL_UART_IRQHandler+0xae>
 80022b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f043 0201 	orr.w	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_UART_IRQHandler+0xd2>
 80022d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d005      	beq.n	80022ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80022ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_UART_IRQHandler+0xf6>
 80022fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b00      	cmp	r3, #0
 800231c:	d011      	beq.n	8002342 <HAL_UART_IRQHandler+0x126>
 800231e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002322:	f003 0320 	and.w	r3, r3, #32
 8002326:	2b00      	cmp	r3, #0
 8002328:	d105      	bne.n	8002336 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800232a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d005      	beq.n	8002342 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f043 0208 	orr.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 81ed 	beq.w	8002726 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800234c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002350:	f003 0320 	and.w	r3, r3, #32
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_UART_IRQHandler+0x14e>
 8002358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b00      	cmp	r3, #0
 8002362:	d002      	beq.n	800236a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fb92 	bl	8002a8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	bf0c      	ite	eq
 8002378:	2301      	moveq	r3, #1
 800237a:	2300      	movne	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_UART_IRQHandler+0x17a>
 800238e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d04f      	beq.n	8002436 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa9a 	bl	80028d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d141      	bne.n	800242e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	3314      	adds	r3, #20
 80023b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023b8:	e853 3f00 	ldrex	r3, [r3]
 80023bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80023c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3314      	adds	r3, #20
 80023d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80023d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80023da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80023e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80023e6:	e841 2300 	strex	r3, r2, [r1]
 80023ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80023ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1d9      	bne.n	80023aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d013      	beq.n	8002426 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	4a7d      	ldr	r2, [pc, #500]	; (80025f8 <HAL_UART_IRQHandler+0x3dc>)
 8002404:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fec3 	bl	8001196 <HAL_DMA_Abort_IT>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002420:	4610      	mov	r0, r2
 8002422:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002424:	e00e      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f990 	bl	800274c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	e00a      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f98c 	bl	800274c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002434:	e006      	b.n	8002444 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f988 	bl	800274c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002442:	e170      	b.n	8002726 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002444:	bf00      	nop
    return;
 8002446:	e16e      	b.n	8002726 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	2b01      	cmp	r3, #1
 800244e:	f040 814a 	bne.w	80026e6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8143 	beq.w	80026e6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 813c 	beq.w	80026e6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800248e:	2b40      	cmp	r3, #64	; 0x40
 8002490:	f040 80b4 	bne.w	80025fc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8140 	beq.w	800272a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024b2:	429a      	cmp	r2, r3
 80024b4:	f080 8139 	bcs.w	800272a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80024be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	f000 8088 	beq.w	80025de <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	330c      	adds	r3, #12
 80024d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	330c      	adds	r3, #12
 80024f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80024fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80024fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002506:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800250a:	e841 2300 	strex	r3, r2, [r1]
 800250e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002512:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1d9      	bne.n	80024ce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	3314      	adds	r3, #20
 8002520:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800252a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252c:	f023 0301 	bic.w	r3, r3, #1
 8002530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	3314      	adds	r3, #20
 800253a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800253e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002542:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002544:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002546:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800254a:	e841 2300 	strex	r3, r2, [r1]
 800254e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1e1      	bne.n	800251a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002560:	e853 3f00 	ldrex	r3, [r3]
 8002564:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	3314      	adds	r3, #20
 8002576:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800257a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800257c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800257e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002580:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002582:	e841 2300 	strex	r3, r2, [r1]
 8002586:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002588:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1e3      	bne.n	8002556 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80025ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ae:	f023 0310 	bic.w	r3, r3, #16
 80025b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	330c      	adds	r3, #12
 80025bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80025c0:	65ba      	str	r2, [r7, #88]	; 0x58
 80025c2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025c8:	e841 2300 	strex	r3, r2, [r1]
 80025cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80025ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e3      	bne.n	800259c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fd6c 	bl	80010b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4619      	mov	r1, r3
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f8b6 	bl	8002760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80025f4:	e099      	b.n	800272a <HAL_UART_IRQHandler+0x50e>
 80025f6:	bf00      	nop
 80025f8:	08002997 	.word	0x08002997
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002604:	b29b      	uxth	r3, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808b 	beq.w	800272e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 8086 	beq.w	800272e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	330c      	adds	r3, #12
 8002628:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	e853 3f00 	ldrex	r3, [r3]
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002638:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	330c      	adds	r3, #12
 8002642:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002646:	647a      	str	r2, [r7, #68]	; 0x44
 8002648:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800264c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800264e:	e841 2300 	strex	r3, r2, [r1]
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1e3      	bne.n	8002622 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3314      	adds	r3, #20
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	e853 3f00 	ldrex	r3, [r3]
 8002668:	623b      	str	r3, [r7, #32]
   return(result);
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	3314      	adds	r3, #20
 800267a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800267e:	633a      	str	r2, [r7, #48]	; 0x30
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002686:	e841 2300 	strex	r3, r2, [r1]
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1e3      	bne.n	800265a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	330c      	adds	r3, #12
 80026a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	e853 3f00 	ldrex	r3, [r3]
 80026ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0310 	bic.w	r3, r3, #16
 80026b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	330c      	adds	r3, #12
 80026c0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80026c4:	61fa      	str	r2, [r7, #28]
 80026c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026c8:	69b9      	ldr	r1, [r7, #24]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	e841 2300 	strex	r3, r2, [r1]
 80026d0:	617b      	str	r3, [r7, #20]
   return(result);
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1e3      	bne.n	80026a0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f83e 	bl	8002760 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026e4:	e023      	b.n	800272e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_UART_IRQHandler+0x4ea>
 80026f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f95d 	bl	80029be <UART_Transmit_IT>
    return;
 8002704:	e014      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800270a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00e      	beq.n	8002730 <HAL_UART_IRQHandler+0x514>
 8002712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f99d 	bl	8002a5e <UART_EndTransmit_IT>
    return;
 8002724:	e004      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
    return;
 8002726:	bf00      	nop
 8002728:	e002      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
      return;
 800272a:	bf00      	nop
 800272c:	e000      	b.n	8002730 <HAL_UART_IRQHandler+0x514>
      return;
 800272e:	bf00      	nop
  }
}
 8002730:	37e8      	adds	r7, #232	; 0xe8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop

08002738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b090      	sub	sp, #64	; 0x40
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002788:	e050      	b.n	800282c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d04c      	beq.n	800282c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002798:	f7fe fb70 	bl	8000e7c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d241      	bcs.n	800282c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	e853 3f00 	ldrex	r3, [r3]
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	330c      	adds	r3, #12
 80027c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c8:	637a      	str	r2, [r7, #52]	; 0x34
 80027ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027d0:	e841 2300 	strex	r3, r2, [r1]
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e5      	bne.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	3314      	adds	r3, #20
 80027e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	e853 3f00 	ldrex	r3, [r3]
 80027ea:	613b      	str	r3, [r7, #16]
   return(result);
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	3314      	adds	r3, #20
 80027fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027fc:	623a      	str	r2, [r7, #32]
 80027fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002800:	69f9      	ldr	r1, [r7, #28]
 8002802:	6a3a      	ldr	r2, [r7, #32]
 8002804:	e841 2300 	strex	r3, r2, [r1]
 8002808:	61bb      	str	r3, [r7, #24]
   return(result);
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e5      	bne.n	80027dc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	e00f      	b.n	800284c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4013      	ands	r3, r2
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	429a      	cmp	r2, r3
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	429a      	cmp	r2, r3
 8002848:	d09f      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3740      	adds	r7, #64	; 0x40
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	88fa      	ldrh	r2, [r7, #6]
 800286c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2222      	movs	r2, #34	; 0x22
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f042 0201 	orr.w	r2, r2, #1
 80028b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b095      	sub	sp, #84	; 0x54
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e2:	e853 3f00 	ldrex	r3, [r3]
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80028f8:	643a      	str	r2, [r7, #64]	; 0x40
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002900:	e841 2300 	strex	r3, r2, [r1]
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1e5      	bne.n	80028d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3314      	adds	r3, #20
 8002912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002914:	6a3b      	ldr	r3, [r7, #32]
 8002916:	e853 3f00 	ldrex	r3, [r3]
 800291a:	61fb      	str	r3, [r7, #28]
   return(result);
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	3314      	adds	r3, #20
 800292a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800292c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	e841 2300 	strex	r3, r2, [r1]
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1e5      	bne.n	800290c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b01      	cmp	r3, #1
 8002946:	d119      	bne.n	800297c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	e853 3f00 	ldrex	r3, [r3]
 8002956:	60bb      	str	r3, [r7, #8]
   return(result);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f023 0310 	bic.w	r3, r3, #16
 800295e:	647b      	str	r3, [r7, #68]	; 0x44
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	330c      	adds	r3, #12
 8002966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002968:	61ba      	str	r2, [r7, #24]
 800296a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800296c:	6979      	ldr	r1, [r7, #20]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	e841 2300 	strex	r3, r2, [r1]
 8002974:	613b      	str	r3, [r7, #16]
   return(result);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1e5      	bne.n	8002948 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2220      	movs	r2, #32
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
}
 800298a:	bf00      	nop
 800298c:	3754      	adds	r7, #84	; 0x54
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff fecb 	bl	800274c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029be:	b480      	push	{r7}
 80029c0:	b085      	sub	sp, #20
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	d13e      	bne.n	8002a50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d114      	bne.n	8002a06 <UART_Transmit_IT+0x48>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	621a      	str	r2, [r3, #32]
 8002a04:	e008      	b.n	8002a18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	1c59      	adds	r1, r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6211      	str	r1, [r2, #32]
 8002a10:	781a      	ldrb	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	4619      	mov	r1, r3
 8002a26:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10f      	bne.n	8002a4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a50:	2302      	movs	r3, #2
  }
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2220      	movs	r2, #32
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f7ff fe5a 	bl	8002738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b08c      	sub	sp, #48	; 0x30
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b22      	cmp	r3, #34	; 0x22
 8002aa0:	f040 80ab 	bne.w	8002bfa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aac:	d117      	bne.n	8002ade <UART_Receive_IT+0x50>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d113      	bne.n	8002ade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	1c9a      	adds	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
 8002adc:	e026      	b.n	8002b2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d007      	beq.n	8002b02 <UART_Receive_IT+0x74>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <UART_Receive_IT+0x82>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	e008      	b.n	8002b22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b1c:	b2da      	uxtb	r2, r3
 8002b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d15a      	bne.n	8002bf6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0220 	bic.w	r2, r2, #32
 8002b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d135      	bne.n	8002bec <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	330c      	adds	r3, #12
 8002b8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	613b      	str	r3, [r7, #16]
   return(result);
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f023 0310 	bic.w	r3, r3, #16
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba6:	623a      	str	r2, [r7, #32]
 8002ba8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	69f9      	ldr	r1, [r7, #28]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	e841 2300 	strex	r3, r2, [r1]
 8002bb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1e5      	bne.n	8002b86 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d10a      	bne.n	8002bde <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff fdbb 	bl	8002760 <HAL_UARTEx_RxEventCallback>
 8002bea:	e002      	b.n	8002bf2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7fd fdd5 	bl	800079c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e002      	b.n	8002bfc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e000      	b.n	8002bfc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002bfa:	2302      	movs	r3, #2
  }
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3730      	adds	r7, #48	; 0x30
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c08:	b0c0      	sub	sp, #256	; 0x100
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c20:	68d9      	ldr	r1, [r3, #12]
 8002c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	ea40 0301 	orr.w	r3, r0, r1
 8002c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c5c:	f021 010c 	bic.w	r1, r1, #12
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7e:	6999      	ldr	r1, [r3, #24]
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	ea40 0301 	orr.w	r3, r0, r1
 8002c8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b8f      	ldr	r3, [pc, #572]	; (8002ed0 <UART_SetConfig+0x2cc>)
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d005      	beq.n	8002ca4 <UART_SetConfig+0xa0>
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b8d      	ldr	r3, [pc, #564]	; (8002ed4 <UART_SetConfig+0x2d0>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d104      	bne.n	8002cae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7fe fd4e 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cac:	e003      	b.n	8002cb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cae:	f7fe fd35 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 8002cb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc0:	f040 810c 	bne.w	8002edc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002cd6:	4622      	mov	r2, r4
 8002cd8:	462b      	mov	r3, r5
 8002cda:	1891      	adds	r1, r2, r2
 8002cdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8002cde:	415b      	adcs	r3, r3
 8002ce0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	eb12 0801 	adds.w	r8, r2, r1
 8002cec:	4629      	mov	r1, r5
 8002cee:	eb43 0901 	adc.w	r9, r3, r1
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d06:	4690      	mov	r8, r2
 8002d08:	4699      	mov	r9, r3
 8002d0a:	4623      	mov	r3, r4
 8002d0c:	eb18 0303 	adds.w	r3, r8, r3
 8002d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d14:	462b      	mov	r3, r5
 8002d16:	eb49 0303 	adc.w	r3, r9, r3
 8002d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d2a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d32:	460b      	mov	r3, r1
 8002d34:	18db      	adds	r3, r3, r3
 8002d36:	653b      	str	r3, [r7, #80]	; 0x50
 8002d38:	4613      	mov	r3, r2
 8002d3a:	eb42 0303 	adc.w	r3, r2, r3
 8002d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d48:	f7fd faba 	bl	80002c0 <__aeabi_uldivmod>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002d52:	fba3 2302 	umull	r2, r3, r3, r2
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	011c      	lsls	r4, r3, #4
 8002d5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d64:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d6c:	4642      	mov	r2, r8
 8002d6e:	464b      	mov	r3, r9
 8002d70:	1891      	adds	r1, r2, r2
 8002d72:	64b9      	str	r1, [r7, #72]	; 0x48
 8002d74:	415b      	adcs	r3, r3
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d7c:	4641      	mov	r1, r8
 8002d7e:	eb12 0a01 	adds.w	sl, r2, r1
 8002d82:	4649      	mov	r1, r9
 8002d84:	eb43 0b01 	adc.w	fp, r3, r1
 8002d88:	f04f 0200 	mov.w	r2, #0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d9c:	4692      	mov	sl, r2
 8002d9e:	469b      	mov	fp, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	eb1a 0303 	adds.w	r3, sl, r3
 8002da6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002daa:	464b      	mov	r3, r9
 8002dac:	eb4b 0303 	adc.w	r3, fp, r3
 8002db0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dc0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002dc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	18db      	adds	r3, r3, r3
 8002dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8002dce:	4613      	mov	r3, r2
 8002dd0:	eb42 0303 	adc.w	r3, r2, r3
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002dda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002dde:	f7fd fa6f 	bl	80002c0 <__aeabi_uldivmod>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4611      	mov	r1, r2
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002dea:	fba3 2301 	umull	r2, r3, r3, r1
 8002dee:	095b      	lsrs	r3, r3, #5
 8002df0:	2264      	movs	r2, #100	; 0x64
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002e00:	fba3 2302 	umull	r2, r3, r3, r2
 8002e04:	095b      	lsrs	r3, r3, #5
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e0c:	441c      	add	r4, r3
 8002e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e12:	2200      	movs	r2, #0
 8002e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e18:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e20:	4642      	mov	r2, r8
 8002e22:	464b      	mov	r3, r9
 8002e24:	1891      	adds	r1, r2, r2
 8002e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e28:	415b      	adcs	r3, r3
 8002e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e30:	4641      	mov	r1, r8
 8002e32:	1851      	adds	r1, r2, r1
 8002e34:	6339      	str	r1, [r7, #48]	; 0x30
 8002e36:	4649      	mov	r1, r9
 8002e38:	414b      	adcs	r3, r1
 8002e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e48:	4659      	mov	r1, fp
 8002e4a:	00cb      	lsls	r3, r1, #3
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e52:	4651      	mov	r1, sl
 8002e54:	00ca      	lsls	r2, r1, #3
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e64:	464b      	mov	r3, r9
 8002e66:	460a      	mov	r2, r1
 8002e68:	eb42 0303 	adc.w	r3, r2, r3
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002e7c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002e80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002e84:	460b      	mov	r3, r1
 8002e86:	18db      	adds	r3, r3, r3
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	eb42 0303 	adc.w	r3, r2, r3
 8002e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002e9a:	f7fd fa11 	bl	80002c0 <__aeabi_uldivmod>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	2164      	movs	r1, #100	; 0x64
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	3332      	adds	r3, #50	; 0x32
 8002eb6:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <UART_SetConfig+0x2d4>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4422      	add	r2, r4
 8002eca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ecc:	e105      	b.n	80030da <UART_SetConfig+0x4d6>
 8002ece:	bf00      	nop
 8002ed0:	40011000 	.word	0x40011000
 8002ed4:	40011400 	.word	0x40011400
 8002ed8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002edc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002ee6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002eea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	6239      	str	r1, [r7, #32]
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002efe:	4641      	mov	r1, r8
 8002f00:	1854      	adds	r4, r2, r1
 8002f02:	4649      	mov	r1, r9
 8002f04:	eb43 0501 	adc.w	r5, r3, r1
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f24:	464b      	mov	r3, r9
 8002f26:	eb45 0303 	adc.w	r3, r5, r3
 8002f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	008b      	lsls	r3, r1, #2
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f54:	4621      	mov	r1, r4
 8002f56:	008a      	lsls	r2, r1, #2
 8002f58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f5c:	f7fd f9b0 	bl	80002c0 <__aeabi_uldivmod>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4b60      	ldr	r3, [pc, #384]	; (80030e8 <UART_SetConfig+0x4e4>)
 8002f66:	fba3 2302 	umull	r2, r3, r3, r2
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	011c      	lsls	r4, r3, #4
 8002f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f72:	2200      	movs	r2, #0
 8002f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002f7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002f80:	4642      	mov	r2, r8
 8002f82:	464b      	mov	r3, r9
 8002f84:	1891      	adds	r1, r2, r2
 8002f86:	61b9      	str	r1, [r7, #24]
 8002f88:	415b      	adcs	r3, r3
 8002f8a:	61fb      	str	r3, [r7, #28]
 8002f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f90:	4641      	mov	r1, r8
 8002f92:	1851      	adds	r1, r2, r1
 8002f94:	6139      	str	r1, [r7, #16]
 8002f96:	4649      	mov	r1, r9
 8002f98:	414b      	adcs	r3, r1
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fa8:	4659      	mov	r1, fp
 8002faa:	00cb      	lsls	r3, r1, #3
 8002fac:	4651      	mov	r1, sl
 8002fae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fb2:	4651      	mov	r1, sl
 8002fb4:	00ca      	lsls	r2, r1, #3
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4603      	mov	r3, r0
 8002fbc:	4642      	mov	r2, r8
 8002fbe:	189b      	adds	r3, r3, r2
 8002fc0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fc4:	464b      	mov	r3, r9
 8002fc6:	460a      	mov	r2, r1
 8002fc8:	eb42 0303 	adc.w	r3, r2, r3
 8002fcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002fda:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002fe8:	4649      	mov	r1, r9
 8002fea:	008b      	lsls	r3, r1, #2
 8002fec:	4641      	mov	r1, r8
 8002fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff2:	4641      	mov	r1, r8
 8002ff4:	008a      	lsls	r2, r1, #2
 8002ff6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ffa:	f7fd f961 	bl	80002c0 <__aeabi_uldivmod>
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <UART_SetConfig+0x4e4>)
 8003004:	fba3 1302 	umull	r1, r3, r3, r2
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	2164      	movs	r1, #100	; 0x64
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	3332      	adds	r3, #50	; 0x32
 8003016:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <UART_SetConfig+0x4e4>)
 8003018:	fba2 2303 	umull	r2, r3, r2, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003022:	441c      	add	r4, r3
 8003024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003028:	2200      	movs	r2, #0
 800302a:	673b      	str	r3, [r7, #112]	; 0x70
 800302c:	677a      	str	r2, [r7, #116]	; 0x74
 800302e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003032:	4642      	mov	r2, r8
 8003034:	464b      	mov	r3, r9
 8003036:	1891      	adds	r1, r2, r2
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	415b      	adcs	r3, r3
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003042:	4641      	mov	r1, r8
 8003044:	1851      	adds	r1, r2, r1
 8003046:	6039      	str	r1, [r7, #0]
 8003048:	4649      	mov	r1, r9
 800304a:	414b      	adcs	r3, r1
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800305a:	4659      	mov	r1, fp
 800305c:	00cb      	lsls	r3, r1, #3
 800305e:	4651      	mov	r1, sl
 8003060:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003064:	4651      	mov	r1, sl
 8003066:	00ca      	lsls	r2, r1, #3
 8003068:	4610      	mov	r0, r2
 800306a:	4619      	mov	r1, r3
 800306c:	4603      	mov	r3, r0
 800306e:	4642      	mov	r2, r8
 8003070:	189b      	adds	r3, r3, r2
 8003072:	66bb      	str	r3, [r7, #104]	; 0x68
 8003074:	464b      	mov	r3, r9
 8003076:	460a      	mov	r2, r1
 8003078:	eb42 0303 	adc.w	r3, r2, r3
 800307c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800307e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	663b      	str	r3, [r7, #96]	; 0x60
 8003088:	667a      	str	r2, [r7, #100]	; 0x64
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003096:	4649      	mov	r1, r9
 8003098:	008b      	lsls	r3, r1, #2
 800309a:	4641      	mov	r1, r8
 800309c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030a0:	4641      	mov	r1, r8
 80030a2:	008a      	lsls	r2, r1, #2
 80030a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030a8:	f7fd f90a 	bl	80002c0 <__aeabi_uldivmod>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <UART_SetConfig+0x4e4>)
 80030b2:	fba3 1302 	umull	r1, r3, r3, r2
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2164      	movs	r1, #100	; 0x64
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	3332      	adds	r3, #50	; 0x32
 80030c4:	4a08      	ldr	r2, [pc, #32]	; (80030e8 <UART_SetConfig+0x4e4>)
 80030c6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	f003 020f 	and.w	r2, r3, #15
 80030d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4422      	add	r2, r4
 80030d8:	609a      	str	r2, [r3, #8]
}
 80030da:	bf00      	nop
 80030dc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80030e0:	46bd      	mov	sp, r7
 80030e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e6:	bf00      	nop
 80030e8:	51eb851f 	.word	0x51eb851f

080030ec <__errno>:
 80030ec:	4b01      	ldr	r3, [pc, #4]	; (80030f4 <__errno+0x8>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	2000000c 	.word	0x2000000c

080030f8 <__libc_init_array>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	4d0d      	ldr	r5, [pc, #52]	; (8003130 <__libc_init_array+0x38>)
 80030fc:	4c0d      	ldr	r4, [pc, #52]	; (8003134 <__libc_init_array+0x3c>)
 80030fe:	1b64      	subs	r4, r4, r5
 8003100:	10a4      	asrs	r4, r4, #2
 8003102:	2600      	movs	r6, #0
 8003104:	42a6      	cmp	r6, r4
 8003106:	d109      	bne.n	800311c <__libc_init_array+0x24>
 8003108:	4d0b      	ldr	r5, [pc, #44]	; (8003138 <__libc_init_array+0x40>)
 800310a:	4c0c      	ldr	r4, [pc, #48]	; (800313c <__libc_init_array+0x44>)
 800310c:	f001 f8e8 	bl	80042e0 <_init>
 8003110:	1b64      	subs	r4, r4, r5
 8003112:	10a4      	asrs	r4, r4, #2
 8003114:	2600      	movs	r6, #0
 8003116:	42a6      	cmp	r6, r4
 8003118:	d105      	bne.n	8003126 <__libc_init_array+0x2e>
 800311a:	bd70      	pop	{r4, r5, r6, pc}
 800311c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003120:	4798      	blx	r3
 8003122:	3601      	adds	r6, #1
 8003124:	e7ee      	b.n	8003104 <__libc_init_array+0xc>
 8003126:	f855 3b04 	ldr.w	r3, [r5], #4
 800312a:	4798      	blx	r3
 800312c:	3601      	adds	r6, #1
 800312e:	e7f2      	b.n	8003116 <__libc_init_array+0x1e>
 8003130:	080045b8 	.word	0x080045b8
 8003134:	080045b8 	.word	0x080045b8
 8003138:	080045b8 	.word	0x080045b8
 800313c:	080045bc 	.word	0x080045bc

08003140 <memset>:
 8003140:	4402      	add	r2, r0
 8003142:	4603      	mov	r3, r0
 8003144:	4293      	cmp	r3, r2
 8003146:	d100      	bne.n	800314a <memset+0xa>
 8003148:	4770      	bx	lr
 800314a:	f803 1b01 	strb.w	r1, [r3], #1
 800314e:	e7f9      	b.n	8003144 <memset+0x4>

08003150 <iprintf>:
 8003150:	b40f      	push	{r0, r1, r2, r3}
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <iprintf+0x2c>)
 8003154:	b513      	push	{r0, r1, r4, lr}
 8003156:	681c      	ldr	r4, [r3, #0]
 8003158:	b124      	cbz	r4, 8003164 <iprintf+0x14>
 800315a:	69a3      	ldr	r3, [r4, #24]
 800315c:	b913      	cbnz	r3, 8003164 <iprintf+0x14>
 800315e:	4620      	mov	r0, r4
 8003160:	f000 f91e 	bl	80033a0 <__sinit>
 8003164:	ab05      	add	r3, sp, #20
 8003166:	9a04      	ldr	r2, [sp, #16]
 8003168:	68a1      	ldr	r1, [r4, #8]
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	4620      	mov	r0, r4
 800316e:	f000 faef 	bl	8003750 <_vfiprintf_r>
 8003172:	b002      	add	sp, #8
 8003174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003178:	b004      	add	sp, #16
 800317a:	4770      	bx	lr
 800317c:	2000000c 	.word	0x2000000c

08003180 <srand>:
 8003180:	b538      	push	{r3, r4, r5, lr}
 8003182:	4b10      	ldr	r3, [pc, #64]	; (80031c4 <srand+0x44>)
 8003184:	681d      	ldr	r5, [r3, #0]
 8003186:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003188:	4604      	mov	r4, r0
 800318a:	b9b3      	cbnz	r3, 80031ba <srand+0x3a>
 800318c:	2018      	movs	r0, #24
 800318e:	f000 f9cd 	bl	800352c <malloc>
 8003192:	4602      	mov	r2, r0
 8003194:	63a8      	str	r0, [r5, #56]	; 0x38
 8003196:	b920      	cbnz	r0, 80031a2 <srand+0x22>
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <srand+0x48>)
 800319a:	480c      	ldr	r0, [pc, #48]	; (80031cc <srand+0x4c>)
 800319c:	2142      	movs	r1, #66	; 0x42
 800319e:	f000 f889 	bl	80032b4 <__assert_func>
 80031a2:	490b      	ldr	r1, [pc, #44]	; (80031d0 <srand+0x50>)
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <srand+0x54>)
 80031a6:	e9c0 1300 	strd	r1, r3, [r0]
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <srand+0x58>)
 80031ac:	6083      	str	r3, [r0, #8]
 80031ae:	230b      	movs	r3, #11
 80031b0:	8183      	strh	r3, [r0, #12]
 80031b2:	2100      	movs	r1, #0
 80031b4:	2001      	movs	r0, #1
 80031b6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80031ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80031bc:	2200      	movs	r2, #0
 80031be:	611c      	str	r4, [r3, #16]
 80031c0:	615a      	str	r2, [r3, #20]
 80031c2:	bd38      	pop	{r3, r4, r5, pc}
 80031c4:	2000000c 	.word	0x2000000c
 80031c8:	0800446c 	.word	0x0800446c
 80031cc:	08004483 	.word	0x08004483
 80031d0:	abcd330e 	.word	0xabcd330e
 80031d4:	e66d1234 	.word	0xe66d1234
 80031d8:	0005deec 	.word	0x0005deec

080031dc <rand>:
 80031dc:	4b16      	ldr	r3, [pc, #88]	; (8003238 <rand+0x5c>)
 80031de:	b510      	push	{r4, lr}
 80031e0:	681c      	ldr	r4, [r3, #0]
 80031e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031e4:	b9b3      	cbnz	r3, 8003214 <rand+0x38>
 80031e6:	2018      	movs	r0, #24
 80031e8:	f000 f9a0 	bl	800352c <malloc>
 80031ec:	63a0      	str	r0, [r4, #56]	; 0x38
 80031ee:	b928      	cbnz	r0, 80031fc <rand+0x20>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <rand+0x60>)
 80031f4:	4812      	ldr	r0, [pc, #72]	; (8003240 <rand+0x64>)
 80031f6:	214e      	movs	r1, #78	; 0x4e
 80031f8:	f000 f85c 	bl	80032b4 <__assert_func>
 80031fc:	4a11      	ldr	r2, [pc, #68]	; (8003244 <rand+0x68>)
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <rand+0x6c>)
 8003200:	e9c0 2300 	strd	r2, r3, [r0]
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <rand+0x70>)
 8003206:	6083      	str	r3, [r0, #8]
 8003208:	230b      	movs	r3, #11
 800320a:	8183      	strh	r3, [r0, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	2300      	movs	r3, #0
 8003210:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003214:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <rand+0x74>)
 8003218:	6920      	ldr	r0, [r4, #16]
 800321a:	6963      	ldr	r3, [r4, #20]
 800321c:	490d      	ldr	r1, [pc, #52]	; (8003254 <rand+0x78>)
 800321e:	4342      	muls	r2, r0
 8003220:	fb01 2203 	mla	r2, r1, r3, r2
 8003224:	fba0 0101 	umull	r0, r1, r0, r1
 8003228:	1c43      	adds	r3, r0, #1
 800322a:	eb42 0001 	adc.w	r0, r2, r1
 800322e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8003232:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003236:	bd10      	pop	{r4, pc}
 8003238:	2000000c 	.word	0x2000000c
 800323c:	0800446c 	.word	0x0800446c
 8003240:	08004483 	.word	0x08004483
 8003244:	abcd330e 	.word	0xabcd330e
 8003248:	e66d1234 	.word	0xe66d1234
 800324c:	0005deec 	.word	0x0005deec
 8003250:	5851f42d 	.word	0x5851f42d
 8003254:	4c957f2d 	.word	0x4c957f2d

08003258 <strncpy>:
 8003258:	b510      	push	{r4, lr}
 800325a:	3901      	subs	r1, #1
 800325c:	4603      	mov	r3, r0
 800325e:	b132      	cbz	r2, 800326e <strncpy+0x16>
 8003260:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003264:	f803 4b01 	strb.w	r4, [r3], #1
 8003268:	3a01      	subs	r2, #1
 800326a:	2c00      	cmp	r4, #0
 800326c:	d1f7      	bne.n	800325e <strncpy+0x6>
 800326e:	441a      	add	r2, r3
 8003270:	2100      	movs	r1, #0
 8003272:	4293      	cmp	r3, r2
 8003274:	d100      	bne.n	8003278 <strncpy+0x20>
 8003276:	bd10      	pop	{r4, pc}
 8003278:	f803 1b01 	strb.w	r1, [r3], #1
 800327c:	e7f9      	b.n	8003272 <strncpy+0x1a>
	...

08003280 <time>:
 8003280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003282:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <time+0x30>)
 8003284:	2200      	movs	r2, #0
 8003286:	4669      	mov	r1, sp
 8003288:	4604      	mov	r4, r0
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	f000 f938 	bl	8003500 <_gettimeofday_r>
 8003290:	2800      	cmp	r0, #0
 8003292:	bfbe      	ittt	lt
 8003294:	f04f 32ff 	movlt.w	r2, #4294967295
 8003298:	f04f 33ff 	movlt.w	r3, #4294967295
 800329c:	e9cd 2300 	strdlt	r2, r3, [sp]
 80032a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032a4:	b10c      	cbz	r4, 80032aa <time+0x2a>
 80032a6:	e9c4 0100 	strd	r0, r1, [r4]
 80032aa:	b004      	add	sp, #16
 80032ac:	bd10      	pop	{r4, pc}
 80032ae:	bf00      	nop
 80032b0:	2000000c 	.word	0x2000000c

080032b4 <__assert_func>:
 80032b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80032b6:	4614      	mov	r4, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <__assert_func+0x2c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4605      	mov	r5, r0
 80032c0:	68d8      	ldr	r0, [r3, #12]
 80032c2:	b14c      	cbz	r4, 80032d8 <__assert_func+0x24>
 80032c4:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <__assert_func+0x30>)
 80032c6:	9100      	str	r1, [sp, #0]
 80032c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80032cc:	4906      	ldr	r1, [pc, #24]	; (80032e8 <__assert_func+0x34>)
 80032ce:	462b      	mov	r3, r5
 80032d0:	f000 f8e4 	bl	800349c <fiprintf>
 80032d4:	f000 fe26 	bl	8003f24 <abort>
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <__assert_func+0x38>)
 80032da:	461c      	mov	r4, r3
 80032dc:	e7f3      	b.n	80032c6 <__assert_func+0x12>
 80032de:	bf00      	nop
 80032e0:	2000000c 	.word	0x2000000c
 80032e4:	080044de 	.word	0x080044de
 80032e8:	080044eb 	.word	0x080044eb
 80032ec:	08004519 	.word	0x08004519

080032f0 <std>:
 80032f0:	2300      	movs	r3, #0
 80032f2:	b510      	push	{r4, lr}
 80032f4:	4604      	mov	r4, r0
 80032f6:	e9c0 3300 	strd	r3, r3, [r0]
 80032fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032fe:	6083      	str	r3, [r0, #8]
 8003300:	8181      	strh	r1, [r0, #12]
 8003302:	6643      	str	r3, [r0, #100]	; 0x64
 8003304:	81c2      	strh	r2, [r0, #14]
 8003306:	6183      	str	r3, [r0, #24]
 8003308:	4619      	mov	r1, r3
 800330a:	2208      	movs	r2, #8
 800330c:	305c      	adds	r0, #92	; 0x5c
 800330e:	f7ff ff17 	bl	8003140 <memset>
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <std+0x38>)
 8003314:	6263      	str	r3, [r4, #36]	; 0x24
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <std+0x3c>)
 8003318:	62a3      	str	r3, [r4, #40]	; 0x28
 800331a:	4b05      	ldr	r3, [pc, #20]	; (8003330 <std+0x40>)
 800331c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800331e:	4b05      	ldr	r3, [pc, #20]	; (8003334 <std+0x44>)
 8003320:	6224      	str	r4, [r4, #32]
 8003322:	6323      	str	r3, [r4, #48]	; 0x30
 8003324:	bd10      	pop	{r4, pc}
 8003326:	bf00      	nop
 8003328:	08003cf9 	.word	0x08003cf9
 800332c:	08003d1b 	.word	0x08003d1b
 8003330:	08003d53 	.word	0x08003d53
 8003334:	08003d77 	.word	0x08003d77

08003338 <_cleanup_r>:
 8003338:	4901      	ldr	r1, [pc, #4]	; (8003340 <_cleanup_r+0x8>)
 800333a:	f000 b8c1 	b.w	80034c0 <_fwalk_reent>
 800333e:	bf00      	nop
 8003340:	08004061 	.word	0x08004061

08003344 <__sfmoreglue>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	2268      	movs	r2, #104	; 0x68
 8003348:	1e4d      	subs	r5, r1, #1
 800334a:	4355      	muls	r5, r2
 800334c:	460e      	mov	r6, r1
 800334e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003352:	f000 f95f 	bl	8003614 <_malloc_r>
 8003356:	4604      	mov	r4, r0
 8003358:	b140      	cbz	r0, 800336c <__sfmoreglue+0x28>
 800335a:	2100      	movs	r1, #0
 800335c:	e9c0 1600 	strd	r1, r6, [r0]
 8003360:	300c      	adds	r0, #12
 8003362:	60a0      	str	r0, [r4, #8]
 8003364:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003368:	f7ff feea 	bl	8003140 <memset>
 800336c:	4620      	mov	r0, r4
 800336e:	bd70      	pop	{r4, r5, r6, pc}

08003370 <__sfp_lock_acquire>:
 8003370:	4801      	ldr	r0, [pc, #4]	; (8003378 <__sfp_lock_acquire+0x8>)
 8003372:	f000 b8d8 	b.w	8003526 <__retarget_lock_acquire_recursive>
 8003376:	bf00      	nop
 8003378:	20000155 	.word	0x20000155

0800337c <__sfp_lock_release>:
 800337c:	4801      	ldr	r0, [pc, #4]	; (8003384 <__sfp_lock_release+0x8>)
 800337e:	f000 b8d3 	b.w	8003528 <__retarget_lock_release_recursive>
 8003382:	bf00      	nop
 8003384:	20000155 	.word	0x20000155

08003388 <__sinit_lock_acquire>:
 8003388:	4801      	ldr	r0, [pc, #4]	; (8003390 <__sinit_lock_acquire+0x8>)
 800338a:	f000 b8cc 	b.w	8003526 <__retarget_lock_acquire_recursive>
 800338e:	bf00      	nop
 8003390:	20000156 	.word	0x20000156

08003394 <__sinit_lock_release>:
 8003394:	4801      	ldr	r0, [pc, #4]	; (800339c <__sinit_lock_release+0x8>)
 8003396:	f000 b8c7 	b.w	8003528 <__retarget_lock_release_recursive>
 800339a:	bf00      	nop
 800339c:	20000156 	.word	0x20000156

080033a0 <__sinit>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	4604      	mov	r4, r0
 80033a4:	f7ff fff0 	bl	8003388 <__sinit_lock_acquire>
 80033a8:	69a3      	ldr	r3, [r4, #24]
 80033aa:	b11b      	cbz	r3, 80033b4 <__sinit+0x14>
 80033ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033b0:	f7ff bff0 	b.w	8003394 <__sinit_lock_release>
 80033b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80033b8:	6523      	str	r3, [r4, #80]	; 0x50
 80033ba:	4b13      	ldr	r3, [pc, #76]	; (8003408 <__sinit+0x68>)
 80033bc:	4a13      	ldr	r2, [pc, #76]	; (800340c <__sinit+0x6c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80033c2:	42a3      	cmp	r3, r4
 80033c4:	bf04      	itt	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	61a3      	streq	r3, [r4, #24]
 80033ca:	4620      	mov	r0, r4
 80033cc:	f000 f820 	bl	8003410 <__sfp>
 80033d0:	6060      	str	r0, [r4, #4]
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 f81c 	bl	8003410 <__sfp>
 80033d8:	60a0      	str	r0, [r4, #8]
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 f818 	bl	8003410 <__sfp>
 80033e0:	2200      	movs	r2, #0
 80033e2:	60e0      	str	r0, [r4, #12]
 80033e4:	2104      	movs	r1, #4
 80033e6:	6860      	ldr	r0, [r4, #4]
 80033e8:	f7ff ff82 	bl	80032f0 <std>
 80033ec:	68a0      	ldr	r0, [r4, #8]
 80033ee:	2201      	movs	r2, #1
 80033f0:	2109      	movs	r1, #9
 80033f2:	f7ff ff7d 	bl	80032f0 <std>
 80033f6:	68e0      	ldr	r0, [r4, #12]
 80033f8:	2202      	movs	r2, #2
 80033fa:	2112      	movs	r1, #18
 80033fc:	f7ff ff78 	bl	80032f0 <std>
 8003400:	2301      	movs	r3, #1
 8003402:	61a3      	str	r3, [r4, #24]
 8003404:	e7d2      	b.n	80033ac <__sinit+0xc>
 8003406:	bf00      	nop
 8003408:	08004468 	.word	0x08004468
 800340c:	08003339 	.word	0x08003339

08003410 <__sfp>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	4607      	mov	r7, r0
 8003414:	f7ff ffac 	bl	8003370 <__sfp_lock_acquire>
 8003418:	4b1e      	ldr	r3, [pc, #120]	; (8003494 <__sfp+0x84>)
 800341a:	681e      	ldr	r6, [r3, #0]
 800341c:	69b3      	ldr	r3, [r6, #24]
 800341e:	b913      	cbnz	r3, 8003426 <__sfp+0x16>
 8003420:	4630      	mov	r0, r6
 8003422:	f7ff ffbd 	bl	80033a0 <__sinit>
 8003426:	3648      	adds	r6, #72	; 0x48
 8003428:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800342c:	3b01      	subs	r3, #1
 800342e:	d503      	bpl.n	8003438 <__sfp+0x28>
 8003430:	6833      	ldr	r3, [r6, #0]
 8003432:	b30b      	cbz	r3, 8003478 <__sfp+0x68>
 8003434:	6836      	ldr	r6, [r6, #0]
 8003436:	e7f7      	b.n	8003428 <__sfp+0x18>
 8003438:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800343c:	b9d5      	cbnz	r5, 8003474 <__sfp+0x64>
 800343e:	4b16      	ldr	r3, [pc, #88]	; (8003498 <__sfp+0x88>)
 8003440:	60e3      	str	r3, [r4, #12]
 8003442:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003446:	6665      	str	r5, [r4, #100]	; 0x64
 8003448:	f000 f86c 	bl	8003524 <__retarget_lock_init_recursive>
 800344c:	f7ff ff96 	bl	800337c <__sfp_lock_release>
 8003450:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003454:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003458:	6025      	str	r5, [r4, #0]
 800345a:	61a5      	str	r5, [r4, #24]
 800345c:	2208      	movs	r2, #8
 800345e:	4629      	mov	r1, r5
 8003460:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003464:	f7ff fe6c 	bl	8003140 <memset>
 8003468:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800346c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003470:	4620      	mov	r0, r4
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003474:	3468      	adds	r4, #104	; 0x68
 8003476:	e7d9      	b.n	800342c <__sfp+0x1c>
 8003478:	2104      	movs	r1, #4
 800347a:	4638      	mov	r0, r7
 800347c:	f7ff ff62 	bl	8003344 <__sfmoreglue>
 8003480:	4604      	mov	r4, r0
 8003482:	6030      	str	r0, [r6, #0]
 8003484:	2800      	cmp	r0, #0
 8003486:	d1d5      	bne.n	8003434 <__sfp+0x24>
 8003488:	f7ff ff78 	bl	800337c <__sfp_lock_release>
 800348c:	230c      	movs	r3, #12
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	e7ee      	b.n	8003470 <__sfp+0x60>
 8003492:	bf00      	nop
 8003494:	08004468 	.word	0x08004468
 8003498:	ffff0001 	.word	0xffff0001

0800349c <fiprintf>:
 800349c:	b40e      	push	{r1, r2, r3}
 800349e:	b503      	push	{r0, r1, lr}
 80034a0:	4601      	mov	r1, r0
 80034a2:	ab03      	add	r3, sp, #12
 80034a4:	4805      	ldr	r0, [pc, #20]	; (80034bc <fiprintf+0x20>)
 80034a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80034aa:	6800      	ldr	r0, [r0, #0]
 80034ac:	9301      	str	r3, [sp, #4]
 80034ae:	f000 f94f 	bl	8003750 <_vfiprintf_r>
 80034b2:	b002      	add	sp, #8
 80034b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80034b8:	b003      	add	sp, #12
 80034ba:	4770      	bx	lr
 80034bc:	2000000c 	.word	0x2000000c

080034c0 <_fwalk_reent>:
 80034c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034c4:	4606      	mov	r6, r0
 80034c6:	4688      	mov	r8, r1
 80034c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80034cc:	2700      	movs	r7, #0
 80034ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80034d2:	f1b9 0901 	subs.w	r9, r9, #1
 80034d6:	d505      	bpl.n	80034e4 <_fwalk_reent+0x24>
 80034d8:	6824      	ldr	r4, [r4, #0]
 80034da:	2c00      	cmp	r4, #0
 80034dc:	d1f7      	bne.n	80034ce <_fwalk_reent+0xe>
 80034de:	4638      	mov	r0, r7
 80034e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e4:	89ab      	ldrh	r3, [r5, #12]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d907      	bls.n	80034fa <_fwalk_reent+0x3a>
 80034ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034ee:	3301      	adds	r3, #1
 80034f0:	d003      	beq.n	80034fa <_fwalk_reent+0x3a>
 80034f2:	4629      	mov	r1, r5
 80034f4:	4630      	mov	r0, r6
 80034f6:	47c0      	blx	r8
 80034f8:	4307      	orrs	r7, r0
 80034fa:	3568      	adds	r5, #104	; 0x68
 80034fc:	e7e9      	b.n	80034d2 <_fwalk_reent+0x12>
	...

08003500 <_gettimeofday_r>:
 8003500:	b538      	push	{r3, r4, r5, lr}
 8003502:	4d07      	ldr	r5, [pc, #28]	; (8003520 <_gettimeofday_r+0x20>)
 8003504:	2300      	movs	r3, #0
 8003506:	4604      	mov	r4, r0
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	602b      	str	r3, [r5, #0]
 800350e:	f000 fedf 	bl	80042d0 <_gettimeofday>
 8003512:	1c43      	adds	r3, r0, #1
 8003514:	d102      	bne.n	800351c <_gettimeofday_r+0x1c>
 8003516:	682b      	ldr	r3, [r5, #0]
 8003518:	b103      	cbz	r3, 800351c <_gettimeofday_r+0x1c>
 800351a:	6023      	str	r3, [r4, #0]
 800351c:	bd38      	pop	{r3, r4, r5, pc}
 800351e:	bf00      	nop
 8003520:	20000160 	.word	0x20000160

08003524 <__retarget_lock_init_recursive>:
 8003524:	4770      	bx	lr

08003526 <__retarget_lock_acquire_recursive>:
 8003526:	4770      	bx	lr

08003528 <__retarget_lock_release_recursive>:
 8003528:	4770      	bx	lr
	...

0800352c <malloc>:
 800352c:	4b02      	ldr	r3, [pc, #8]	; (8003538 <malloc+0xc>)
 800352e:	4601      	mov	r1, r0
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	f000 b86f 	b.w	8003614 <_malloc_r>
 8003536:	bf00      	nop
 8003538:	2000000c 	.word	0x2000000c

0800353c <_free_r>:
 800353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800353e:	2900      	cmp	r1, #0
 8003540:	d044      	beq.n	80035cc <_free_r+0x90>
 8003542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003546:	9001      	str	r0, [sp, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f1a1 0404 	sub.w	r4, r1, #4
 800354e:	bfb8      	it	lt
 8003550:	18e4      	addlt	r4, r4, r3
 8003552:	f000 fe39 	bl	80041c8 <__malloc_lock>
 8003556:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <_free_r+0x94>)
 8003558:	9801      	ldr	r0, [sp, #4]
 800355a:	6813      	ldr	r3, [r2, #0]
 800355c:	b933      	cbnz	r3, 800356c <_free_r+0x30>
 800355e:	6063      	str	r3, [r4, #4]
 8003560:	6014      	str	r4, [r2, #0]
 8003562:	b003      	add	sp, #12
 8003564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003568:	f000 be34 	b.w	80041d4 <__malloc_unlock>
 800356c:	42a3      	cmp	r3, r4
 800356e:	d908      	bls.n	8003582 <_free_r+0x46>
 8003570:	6825      	ldr	r5, [r4, #0]
 8003572:	1961      	adds	r1, r4, r5
 8003574:	428b      	cmp	r3, r1
 8003576:	bf01      	itttt	eq
 8003578:	6819      	ldreq	r1, [r3, #0]
 800357a:	685b      	ldreq	r3, [r3, #4]
 800357c:	1949      	addeq	r1, r1, r5
 800357e:	6021      	streq	r1, [r4, #0]
 8003580:	e7ed      	b.n	800355e <_free_r+0x22>
 8003582:	461a      	mov	r2, r3
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	b10b      	cbz	r3, 800358c <_free_r+0x50>
 8003588:	42a3      	cmp	r3, r4
 800358a:	d9fa      	bls.n	8003582 <_free_r+0x46>
 800358c:	6811      	ldr	r1, [r2, #0]
 800358e:	1855      	adds	r5, r2, r1
 8003590:	42a5      	cmp	r5, r4
 8003592:	d10b      	bne.n	80035ac <_free_r+0x70>
 8003594:	6824      	ldr	r4, [r4, #0]
 8003596:	4421      	add	r1, r4
 8003598:	1854      	adds	r4, r2, r1
 800359a:	42a3      	cmp	r3, r4
 800359c:	6011      	str	r1, [r2, #0]
 800359e:	d1e0      	bne.n	8003562 <_free_r+0x26>
 80035a0:	681c      	ldr	r4, [r3, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	6053      	str	r3, [r2, #4]
 80035a6:	4421      	add	r1, r4
 80035a8:	6011      	str	r1, [r2, #0]
 80035aa:	e7da      	b.n	8003562 <_free_r+0x26>
 80035ac:	d902      	bls.n	80035b4 <_free_r+0x78>
 80035ae:	230c      	movs	r3, #12
 80035b0:	6003      	str	r3, [r0, #0]
 80035b2:	e7d6      	b.n	8003562 <_free_r+0x26>
 80035b4:	6825      	ldr	r5, [r4, #0]
 80035b6:	1961      	adds	r1, r4, r5
 80035b8:	428b      	cmp	r3, r1
 80035ba:	bf04      	itt	eq
 80035bc:	6819      	ldreq	r1, [r3, #0]
 80035be:	685b      	ldreq	r3, [r3, #4]
 80035c0:	6063      	str	r3, [r4, #4]
 80035c2:	bf04      	itt	eq
 80035c4:	1949      	addeq	r1, r1, r5
 80035c6:	6021      	streq	r1, [r4, #0]
 80035c8:	6054      	str	r4, [r2, #4]
 80035ca:	e7ca      	b.n	8003562 <_free_r+0x26>
 80035cc:	b003      	add	sp, #12
 80035ce:	bd30      	pop	{r4, r5, pc}
 80035d0:	20000158 	.word	0x20000158

080035d4 <sbrk_aligned>:
 80035d4:	b570      	push	{r4, r5, r6, lr}
 80035d6:	4e0e      	ldr	r6, [pc, #56]	; (8003610 <sbrk_aligned+0x3c>)
 80035d8:	460c      	mov	r4, r1
 80035da:	6831      	ldr	r1, [r6, #0]
 80035dc:	4605      	mov	r5, r0
 80035de:	b911      	cbnz	r1, 80035e6 <sbrk_aligned+0x12>
 80035e0:	f000 fb7a 	bl	8003cd8 <_sbrk_r>
 80035e4:	6030      	str	r0, [r6, #0]
 80035e6:	4621      	mov	r1, r4
 80035e8:	4628      	mov	r0, r5
 80035ea:	f000 fb75 	bl	8003cd8 <_sbrk_r>
 80035ee:	1c43      	adds	r3, r0, #1
 80035f0:	d00a      	beq.n	8003608 <sbrk_aligned+0x34>
 80035f2:	1cc4      	adds	r4, r0, #3
 80035f4:	f024 0403 	bic.w	r4, r4, #3
 80035f8:	42a0      	cmp	r0, r4
 80035fa:	d007      	beq.n	800360c <sbrk_aligned+0x38>
 80035fc:	1a21      	subs	r1, r4, r0
 80035fe:	4628      	mov	r0, r5
 8003600:	f000 fb6a 	bl	8003cd8 <_sbrk_r>
 8003604:	3001      	adds	r0, #1
 8003606:	d101      	bne.n	800360c <sbrk_aligned+0x38>
 8003608:	f04f 34ff 	mov.w	r4, #4294967295
 800360c:	4620      	mov	r0, r4
 800360e:	bd70      	pop	{r4, r5, r6, pc}
 8003610:	2000015c 	.word	0x2000015c

08003614 <_malloc_r>:
 8003614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003618:	1ccd      	adds	r5, r1, #3
 800361a:	f025 0503 	bic.w	r5, r5, #3
 800361e:	3508      	adds	r5, #8
 8003620:	2d0c      	cmp	r5, #12
 8003622:	bf38      	it	cc
 8003624:	250c      	movcc	r5, #12
 8003626:	2d00      	cmp	r5, #0
 8003628:	4607      	mov	r7, r0
 800362a:	db01      	blt.n	8003630 <_malloc_r+0x1c>
 800362c:	42a9      	cmp	r1, r5
 800362e:	d905      	bls.n	800363c <_malloc_r+0x28>
 8003630:	230c      	movs	r3, #12
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	2600      	movs	r6, #0
 8003636:	4630      	mov	r0, r6
 8003638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800363c:	4e2e      	ldr	r6, [pc, #184]	; (80036f8 <_malloc_r+0xe4>)
 800363e:	f000 fdc3 	bl	80041c8 <__malloc_lock>
 8003642:	6833      	ldr	r3, [r6, #0]
 8003644:	461c      	mov	r4, r3
 8003646:	bb34      	cbnz	r4, 8003696 <_malloc_r+0x82>
 8003648:	4629      	mov	r1, r5
 800364a:	4638      	mov	r0, r7
 800364c:	f7ff ffc2 	bl	80035d4 <sbrk_aligned>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	4604      	mov	r4, r0
 8003654:	d14d      	bne.n	80036f2 <_malloc_r+0xde>
 8003656:	6834      	ldr	r4, [r6, #0]
 8003658:	4626      	mov	r6, r4
 800365a:	2e00      	cmp	r6, #0
 800365c:	d140      	bne.n	80036e0 <_malloc_r+0xcc>
 800365e:	6823      	ldr	r3, [r4, #0]
 8003660:	4631      	mov	r1, r6
 8003662:	4638      	mov	r0, r7
 8003664:	eb04 0803 	add.w	r8, r4, r3
 8003668:	f000 fb36 	bl	8003cd8 <_sbrk_r>
 800366c:	4580      	cmp	r8, r0
 800366e:	d13a      	bne.n	80036e6 <_malloc_r+0xd2>
 8003670:	6821      	ldr	r1, [r4, #0]
 8003672:	3503      	adds	r5, #3
 8003674:	1a6d      	subs	r5, r5, r1
 8003676:	f025 0503 	bic.w	r5, r5, #3
 800367a:	3508      	adds	r5, #8
 800367c:	2d0c      	cmp	r5, #12
 800367e:	bf38      	it	cc
 8003680:	250c      	movcc	r5, #12
 8003682:	4629      	mov	r1, r5
 8003684:	4638      	mov	r0, r7
 8003686:	f7ff ffa5 	bl	80035d4 <sbrk_aligned>
 800368a:	3001      	adds	r0, #1
 800368c:	d02b      	beq.n	80036e6 <_malloc_r+0xd2>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	442b      	add	r3, r5
 8003692:	6023      	str	r3, [r4, #0]
 8003694:	e00e      	b.n	80036b4 <_malloc_r+0xa0>
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	1b52      	subs	r2, r2, r5
 800369a:	d41e      	bmi.n	80036da <_malloc_r+0xc6>
 800369c:	2a0b      	cmp	r2, #11
 800369e:	d916      	bls.n	80036ce <_malloc_r+0xba>
 80036a0:	1961      	adds	r1, r4, r5
 80036a2:	42a3      	cmp	r3, r4
 80036a4:	6025      	str	r5, [r4, #0]
 80036a6:	bf18      	it	ne
 80036a8:	6059      	strne	r1, [r3, #4]
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	bf08      	it	eq
 80036ae:	6031      	streq	r1, [r6, #0]
 80036b0:	5162      	str	r2, [r4, r5]
 80036b2:	604b      	str	r3, [r1, #4]
 80036b4:	4638      	mov	r0, r7
 80036b6:	f104 060b 	add.w	r6, r4, #11
 80036ba:	f000 fd8b 	bl	80041d4 <__malloc_unlock>
 80036be:	f026 0607 	bic.w	r6, r6, #7
 80036c2:	1d23      	adds	r3, r4, #4
 80036c4:	1af2      	subs	r2, r6, r3
 80036c6:	d0b6      	beq.n	8003636 <_malloc_r+0x22>
 80036c8:	1b9b      	subs	r3, r3, r6
 80036ca:	50a3      	str	r3, [r4, r2]
 80036cc:	e7b3      	b.n	8003636 <_malloc_r+0x22>
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	42a3      	cmp	r3, r4
 80036d2:	bf0c      	ite	eq
 80036d4:	6032      	streq	r2, [r6, #0]
 80036d6:	605a      	strne	r2, [r3, #4]
 80036d8:	e7ec      	b.n	80036b4 <_malloc_r+0xa0>
 80036da:	4623      	mov	r3, r4
 80036dc:	6864      	ldr	r4, [r4, #4]
 80036de:	e7b2      	b.n	8003646 <_malloc_r+0x32>
 80036e0:	4634      	mov	r4, r6
 80036e2:	6876      	ldr	r6, [r6, #4]
 80036e4:	e7b9      	b.n	800365a <_malloc_r+0x46>
 80036e6:	230c      	movs	r3, #12
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	4638      	mov	r0, r7
 80036ec:	f000 fd72 	bl	80041d4 <__malloc_unlock>
 80036f0:	e7a1      	b.n	8003636 <_malloc_r+0x22>
 80036f2:	6025      	str	r5, [r4, #0]
 80036f4:	e7de      	b.n	80036b4 <_malloc_r+0xa0>
 80036f6:	bf00      	nop
 80036f8:	20000158 	.word	0x20000158

080036fc <__sfputc_r>:
 80036fc:	6893      	ldr	r3, [r2, #8]
 80036fe:	3b01      	subs	r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	b410      	push	{r4}
 8003704:	6093      	str	r3, [r2, #8]
 8003706:	da08      	bge.n	800371a <__sfputc_r+0x1e>
 8003708:	6994      	ldr	r4, [r2, #24]
 800370a:	42a3      	cmp	r3, r4
 800370c:	db01      	blt.n	8003712 <__sfputc_r+0x16>
 800370e:	290a      	cmp	r1, #10
 8003710:	d103      	bne.n	800371a <__sfputc_r+0x1e>
 8003712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003716:	f000 bb33 	b.w	8003d80 <__swbuf_r>
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	1c58      	adds	r0, r3, #1
 800371e:	6010      	str	r0, [r2, #0]
 8003720:	7019      	strb	r1, [r3, #0]
 8003722:	4608      	mov	r0, r1
 8003724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003728:	4770      	bx	lr

0800372a <__sfputs_r>:
 800372a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372c:	4606      	mov	r6, r0
 800372e:	460f      	mov	r7, r1
 8003730:	4614      	mov	r4, r2
 8003732:	18d5      	adds	r5, r2, r3
 8003734:	42ac      	cmp	r4, r5
 8003736:	d101      	bne.n	800373c <__sfputs_r+0x12>
 8003738:	2000      	movs	r0, #0
 800373a:	e007      	b.n	800374c <__sfputs_r+0x22>
 800373c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003740:	463a      	mov	r2, r7
 8003742:	4630      	mov	r0, r6
 8003744:	f7ff ffda 	bl	80036fc <__sfputc_r>
 8003748:	1c43      	adds	r3, r0, #1
 800374a:	d1f3      	bne.n	8003734 <__sfputs_r+0xa>
 800374c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003750 <_vfiprintf_r>:
 8003750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003754:	460d      	mov	r5, r1
 8003756:	b09d      	sub	sp, #116	; 0x74
 8003758:	4614      	mov	r4, r2
 800375a:	4698      	mov	r8, r3
 800375c:	4606      	mov	r6, r0
 800375e:	b118      	cbz	r0, 8003768 <_vfiprintf_r+0x18>
 8003760:	6983      	ldr	r3, [r0, #24]
 8003762:	b90b      	cbnz	r3, 8003768 <_vfiprintf_r+0x18>
 8003764:	f7ff fe1c 	bl	80033a0 <__sinit>
 8003768:	4b89      	ldr	r3, [pc, #548]	; (8003990 <_vfiprintf_r+0x240>)
 800376a:	429d      	cmp	r5, r3
 800376c:	d11b      	bne.n	80037a6 <_vfiprintf_r+0x56>
 800376e:	6875      	ldr	r5, [r6, #4]
 8003770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003772:	07d9      	lsls	r1, r3, #31
 8003774:	d405      	bmi.n	8003782 <_vfiprintf_r+0x32>
 8003776:	89ab      	ldrh	r3, [r5, #12]
 8003778:	059a      	lsls	r2, r3, #22
 800377a:	d402      	bmi.n	8003782 <_vfiprintf_r+0x32>
 800377c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377e:	f7ff fed2 	bl	8003526 <__retarget_lock_acquire_recursive>
 8003782:	89ab      	ldrh	r3, [r5, #12]
 8003784:	071b      	lsls	r3, r3, #28
 8003786:	d501      	bpl.n	800378c <_vfiprintf_r+0x3c>
 8003788:	692b      	ldr	r3, [r5, #16]
 800378a:	b9eb      	cbnz	r3, 80037c8 <_vfiprintf_r+0x78>
 800378c:	4629      	mov	r1, r5
 800378e:	4630      	mov	r0, r6
 8003790:	f000 fb5a 	bl	8003e48 <__swsetup_r>
 8003794:	b1c0      	cbz	r0, 80037c8 <_vfiprintf_r+0x78>
 8003796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003798:	07dc      	lsls	r4, r3, #31
 800379a:	d50e      	bpl.n	80037ba <_vfiprintf_r+0x6a>
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	b01d      	add	sp, #116	; 0x74
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	4b7b      	ldr	r3, [pc, #492]	; (8003994 <_vfiprintf_r+0x244>)
 80037a8:	429d      	cmp	r5, r3
 80037aa:	d101      	bne.n	80037b0 <_vfiprintf_r+0x60>
 80037ac:	68b5      	ldr	r5, [r6, #8]
 80037ae:	e7df      	b.n	8003770 <_vfiprintf_r+0x20>
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <_vfiprintf_r+0x248>)
 80037b2:	429d      	cmp	r5, r3
 80037b4:	bf08      	it	eq
 80037b6:	68f5      	ldreq	r5, [r6, #12]
 80037b8:	e7da      	b.n	8003770 <_vfiprintf_r+0x20>
 80037ba:	89ab      	ldrh	r3, [r5, #12]
 80037bc:	0598      	lsls	r0, r3, #22
 80037be:	d4ed      	bmi.n	800379c <_vfiprintf_r+0x4c>
 80037c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037c2:	f7ff feb1 	bl	8003528 <__retarget_lock_release_recursive>
 80037c6:	e7e9      	b.n	800379c <_vfiprintf_r+0x4c>
 80037c8:	2300      	movs	r3, #0
 80037ca:	9309      	str	r3, [sp, #36]	; 0x24
 80037cc:	2320      	movs	r3, #32
 80037ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80037d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80037d6:	2330      	movs	r3, #48	; 0x30
 80037d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800399c <_vfiprintf_r+0x24c>
 80037dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80037e0:	f04f 0901 	mov.w	r9, #1
 80037e4:	4623      	mov	r3, r4
 80037e6:	469a      	mov	sl, r3
 80037e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037ec:	b10a      	cbz	r2, 80037f2 <_vfiprintf_r+0xa2>
 80037ee:	2a25      	cmp	r2, #37	; 0x25
 80037f0:	d1f9      	bne.n	80037e6 <_vfiprintf_r+0x96>
 80037f2:	ebba 0b04 	subs.w	fp, sl, r4
 80037f6:	d00b      	beq.n	8003810 <_vfiprintf_r+0xc0>
 80037f8:	465b      	mov	r3, fp
 80037fa:	4622      	mov	r2, r4
 80037fc:	4629      	mov	r1, r5
 80037fe:	4630      	mov	r0, r6
 8003800:	f7ff ff93 	bl	800372a <__sfputs_r>
 8003804:	3001      	adds	r0, #1
 8003806:	f000 80aa 	beq.w	800395e <_vfiprintf_r+0x20e>
 800380a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800380c:	445a      	add	r2, fp
 800380e:	9209      	str	r2, [sp, #36]	; 0x24
 8003810:	f89a 3000 	ldrb.w	r3, [sl]
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 80a2 	beq.w	800395e <_vfiprintf_r+0x20e>
 800381a:	2300      	movs	r3, #0
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003824:	f10a 0a01 	add.w	sl, sl, #1
 8003828:	9304      	str	r3, [sp, #16]
 800382a:	9307      	str	r3, [sp, #28]
 800382c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003830:	931a      	str	r3, [sp, #104]	; 0x68
 8003832:	4654      	mov	r4, sl
 8003834:	2205      	movs	r2, #5
 8003836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383a:	4858      	ldr	r0, [pc, #352]	; (800399c <_vfiprintf_r+0x24c>)
 800383c:	f7fc fcf0 	bl	8000220 <memchr>
 8003840:	9a04      	ldr	r2, [sp, #16]
 8003842:	b9d8      	cbnz	r0, 800387c <_vfiprintf_r+0x12c>
 8003844:	06d1      	lsls	r1, r2, #27
 8003846:	bf44      	itt	mi
 8003848:	2320      	movmi	r3, #32
 800384a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800384e:	0713      	lsls	r3, r2, #28
 8003850:	bf44      	itt	mi
 8003852:	232b      	movmi	r3, #43	; 0x2b
 8003854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003858:	f89a 3000 	ldrb.w	r3, [sl]
 800385c:	2b2a      	cmp	r3, #42	; 0x2a
 800385e:	d015      	beq.n	800388c <_vfiprintf_r+0x13c>
 8003860:	9a07      	ldr	r2, [sp, #28]
 8003862:	4654      	mov	r4, sl
 8003864:	2000      	movs	r0, #0
 8003866:	f04f 0c0a 	mov.w	ip, #10
 800386a:	4621      	mov	r1, r4
 800386c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003870:	3b30      	subs	r3, #48	; 0x30
 8003872:	2b09      	cmp	r3, #9
 8003874:	d94e      	bls.n	8003914 <_vfiprintf_r+0x1c4>
 8003876:	b1b0      	cbz	r0, 80038a6 <_vfiprintf_r+0x156>
 8003878:	9207      	str	r2, [sp, #28]
 800387a:	e014      	b.n	80038a6 <_vfiprintf_r+0x156>
 800387c:	eba0 0308 	sub.w	r3, r0, r8
 8003880:	fa09 f303 	lsl.w	r3, r9, r3
 8003884:	4313      	orrs	r3, r2
 8003886:	9304      	str	r3, [sp, #16]
 8003888:	46a2      	mov	sl, r4
 800388a:	e7d2      	b.n	8003832 <_vfiprintf_r+0xe2>
 800388c:	9b03      	ldr	r3, [sp, #12]
 800388e:	1d19      	adds	r1, r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	9103      	str	r1, [sp, #12]
 8003894:	2b00      	cmp	r3, #0
 8003896:	bfbb      	ittet	lt
 8003898:	425b      	neglt	r3, r3
 800389a:	f042 0202 	orrlt.w	r2, r2, #2
 800389e:	9307      	strge	r3, [sp, #28]
 80038a0:	9307      	strlt	r3, [sp, #28]
 80038a2:	bfb8      	it	lt
 80038a4:	9204      	strlt	r2, [sp, #16]
 80038a6:	7823      	ldrb	r3, [r4, #0]
 80038a8:	2b2e      	cmp	r3, #46	; 0x2e
 80038aa:	d10c      	bne.n	80038c6 <_vfiprintf_r+0x176>
 80038ac:	7863      	ldrb	r3, [r4, #1]
 80038ae:	2b2a      	cmp	r3, #42	; 0x2a
 80038b0:	d135      	bne.n	800391e <_vfiprintf_r+0x1ce>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	1d1a      	adds	r2, r3, #4
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	9203      	str	r2, [sp, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	bfb8      	it	lt
 80038be:	f04f 33ff 	movlt.w	r3, #4294967295
 80038c2:	3402      	adds	r4, #2
 80038c4:	9305      	str	r3, [sp, #20]
 80038c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80039ac <_vfiprintf_r+0x25c>
 80038ca:	7821      	ldrb	r1, [r4, #0]
 80038cc:	2203      	movs	r2, #3
 80038ce:	4650      	mov	r0, sl
 80038d0:	f7fc fca6 	bl	8000220 <memchr>
 80038d4:	b140      	cbz	r0, 80038e8 <_vfiprintf_r+0x198>
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	eba0 000a 	sub.w	r0, r0, sl
 80038dc:	fa03 f000 	lsl.w	r0, r3, r0
 80038e0:	9b04      	ldr	r3, [sp, #16]
 80038e2:	4303      	orrs	r3, r0
 80038e4:	3401      	adds	r4, #1
 80038e6:	9304      	str	r3, [sp, #16]
 80038e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038ec:	482c      	ldr	r0, [pc, #176]	; (80039a0 <_vfiprintf_r+0x250>)
 80038ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038f2:	2206      	movs	r2, #6
 80038f4:	f7fc fc94 	bl	8000220 <memchr>
 80038f8:	2800      	cmp	r0, #0
 80038fa:	d03f      	beq.n	800397c <_vfiprintf_r+0x22c>
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <_vfiprintf_r+0x254>)
 80038fe:	bb1b      	cbnz	r3, 8003948 <_vfiprintf_r+0x1f8>
 8003900:	9b03      	ldr	r3, [sp, #12]
 8003902:	3307      	adds	r3, #7
 8003904:	f023 0307 	bic.w	r3, r3, #7
 8003908:	3308      	adds	r3, #8
 800390a:	9303      	str	r3, [sp, #12]
 800390c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800390e:	443b      	add	r3, r7
 8003910:	9309      	str	r3, [sp, #36]	; 0x24
 8003912:	e767      	b.n	80037e4 <_vfiprintf_r+0x94>
 8003914:	fb0c 3202 	mla	r2, ip, r2, r3
 8003918:	460c      	mov	r4, r1
 800391a:	2001      	movs	r0, #1
 800391c:	e7a5      	b.n	800386a <_vfiprintf_r+0x11a>
 800391e:	2300      	movs	r3, #0
 8003920:	3401      	adds	r4, #1
 8003922:	9305      	str	r3, [sp, #20]
 8003924:	4619      	mov	r1, r3
 8003926:	f04f 0c0a 	mov.w	ip, #10
 800392a:	4620      	mov	r0, r4
 800392c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003930:	3a30      	subs	r2, #48	; 0x30
 8003932:	2a09      	cmp	r2, #9
 8003934:	d903      	bls.n	800393e <_vfiprintf_r+0x1ee>
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0c5      	beq.n	80038c6 <_vfiprintf_r+0x176>
 800393a:	9105      	str	r1, [sp, #20]
 800393c:	e7c3      	b.n	80038c6 <_vfiprintf_r+0x176>
 800393e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003942:	4604      	mov	r4, r0
 8003944:	2301      	movs	r3, #1
 8003946:	e7f0      	b.n	800392a <_vfiprintf_r+0x1da>
 8003948:	ab03      	add	r3, sp, #12
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	462a      	mov	r2, r5
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <_vfiprintf_r+0x258>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	4630      	mov	r0, r6
 8003954:	f3af 8000 	nop.w
 8003958:	4607      	mov	r7, r0
 800395a:	1c78      	adds	r0, r7, #1
 800395c:	d1d6      	bne.n	800390c <_vfiprintf_r+0x1bc>
 800395e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003960:	07d9      	lsls	r1, r3, #31
 8003962:	d405      	bmi.n	8003970 <_vfiprintf_r+0x220>
 8003964:	89ab      	ldrh	r3, [r5, #12]
 8003966:	059a      	lsls	r2, r3, #22
 8003968:	d402      	bmi.n	8003970 <_vfiprintf_r+0x220>
 800396a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800396c:	f7ff fddc 	bl	8003528 <__retarget_lock_release_recursive>
 8003970:	89ab      	ldrh	r3, [r5, #12]
 8003972:	065b      	lsls	r3, r3, #25
 8003974:	f53f af12 	bmi.w	800379c <_vfiprintf_r+0x4c>
 8003978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800397a:	e711      	b.n	80037a0 <_vfiprintf_r+0x50>
 800397c:	ab03      	add	r3, sp, #12
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	462a      	mov	r2, r5
 8003982:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <_vfiprintf_r+0x258>)
 8003984:	a904      	add	r1, sp, #16
 8003986:	4630      	mov	r0, r6
 8003988:	f000 f880 	bl	8003a8c <_printf_i>
 800398c:	e7e4      	b.n	8003958 <_vfiprintf_r+0x208>
 800398e:	bf00      	nop
 8003990:	0800453c 	.word	0x0800453c
 8003994:	0800455c 	.word	0x0800455c
 8003998:	0800451c 	.word	0x0800451c
 800399c:	0800457c 	.word	0x0800457c
 80039a0:	08004586 	.word	0x08004586
 80039a4:	00000000 	.word	0x00000000
 80039a8:	0800372b 	.word	0x0800372b
 80039ac:	08004582 	.word	0x08004582

080039b0 <_printf_common>:
 80039b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039b4:	4616      	mov	r6, r2
 80039b6:	4699      	mov	r9, r3
 80039b8:	688a      	ldr	r2, [r1, #8]
 80039ba:	690b      	ldr	r3, [r1, #16]
 80039bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	bfb8      	it	lt
 80039c4:	4613      	movlt	r3, r2
 80039c6:	6033      	str	r3, [r6, #0]
 80039c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80039cc:	4607      	mov	r7, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	b10a      	cbz	r2, 80039d6 <_printf_common+0x26>
 80039d2:	3301      	adds	r3, #1
 80039d4:	6033      	str	r3, [r6, #0]
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	0699      	lsls	r1, r3, #26
 80039da:	bf42      	ittt	mi
 80039dc:	6833      	ldrmi	r3, [r6, #0]
 80039de:	3302      	addmi	r3, #2
 80039e0:	6033      	strmi	r3, [r6, #0]
 80039e2:	6825      	ldr	r5, [r4, #0]
 80039e4:	f015 0506 	ands.w	r5, r5, #6
 80039e8:	d106      	bne.n	80039f8 <_printf_common+0x48>
 80039ea:	f104 0a19 	add.w	sl, r4, #25
 80039ee:	68e3      	ldr	r3, [r4, #12]
 80039f0:	6832      	ldr	r2, [r6, #0]
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	42ab      	cmp	r3, r5
 80039f6:	dc26      	bgt.n	8003a46 <_printf_common+0x96>
 80039f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039fc:	1e13      	subs	r3, r2, #0
 80039fe:	6822      	ldr	r2, [r4, #0]
 8003a00:	bf18      	it	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	0692      	lsls	r2, r2, #26
 8003a06:	d42b      	bmi.n	8003a60 <_printf_common+0xb0>
 8003a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a0c:	4649      	mov	r1, r9
 8003a0e:	4638      	mov	r0, r7
 8003a10:	47c0      	blx	r8
 8003a12:	3001      	adds	r0, #1
 8003a14:	d01e      	beq.n	8003a54 <_printf_common+0xa4>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	68e5      	ldr	r5, [r4, #12]
 8003a1a:	6832      	ldr	r2, [r6, #0]
 8003a1c:	f003 0306 	and.w	r3, r3, #6
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	bf08      	it	eq
 8003a24:	1aad      	subeq	r5, r5, r2
 8003a26:	68a3      	ldr	r3, [r4, #8]
 8003a28:	6922      	ldr	r2, [r4, #16]
 8003a2a:	bf0c      	ite	eq
 8003a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a30:	2500      	movne	r5, #0
 8003a32:	4293      	cmp	r3, r2
 8003a34:	bfc4      	itt	gt
 8003a36:	1a9b      	subgt	r3, r3, r2
 8003a38:	18ed      	addgt	r5, r5, r3
 8003a3a:	2600      	movs	r6, #0
 8003a3c:	341a      	adds	r4, #26
 8003a3e:	42b5      	cmp	r5, r6
 8003a40:	d11a      	bne.n	8003a78 <_printf_common+0xc8>
 8003a42:	2000      	movs	r0, #0
 8003a44:	e008      	b.n	8003a58 <_printf_common+0xa8>
 8003a46:	2301      	movs	r3, #1
 8003a48:	4652      	mov	r2, sl
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4638      	mov	r0, r7
 8003a4e:	47c0      	blx	r8
 8003a50:	3001      	adds	r0, #1
 8003a52:	d103      	bne.n	8003a5c <_printf_common+0xac>
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a5c:	3501      	adds	r5, #1
 8003a5e:	e7c6      	b.n	80039ee <_printf_common+0x3e>
 8003a60:	18e1      	adds	r1, r4, r3
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	2030      	movs	r0, #48	; 0x30
 8003a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a6a:	4422      	add	r2, r4
 8003a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a74:	3302      	adds	r3, #2
 8003a76:	e7c7      	b.n	8003a08 <_printf_common+0x58>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	4649      	mov	r1, r9
 8003a7e:	4638      	mov	r0, r7
 8003a80:	47c0      	blx	r8
 8003a82:	3001      	adds	r0, #1
 8003a84:	d0e6      	beq.n	8003a54 <_printf_common+0xa4>
 8003a86:	3601      	adds	r6, #1
 8003a88:	e7d9      	b.n	8003a3e <_printf_common+0x8e>
	...

08003a8c <_printf_i>:
 8003a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a90:	7e0f      	ldrb	r7, [r1, #24]
 8003a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a94:	2f78      	cmp	r7, #120	; 0x78
 8003a96:	4691      	mov	r9, r2
 8003a98:	4680      	mov	r8, r0
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	469a      	mov	sl, r3
 8003a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aa2:	d807      	bhi.n	8003ab4 <_printf_i+0x28>
 8003aa4:	2f62      	cmp	r7, #98	; 0x62
 8003aa6:	d80a      	bhi.n	8003abe <_printf_i+0x32>
 8003aa8:	2f00      	cmp	r7, #0
 8003aaa:	f000 80d8 	beq.w	8003c5e <_printf_i+0x1d2>
 8003aae:	2f58      	cmp	r7, #88	; 0x58
 8003ab0:	f000 80a3 	beq.w	8003bfa <_printf_i+0x16e>
 8003ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003abc:	e03a      	b.n	8003b34 <_printf_i+0xa8>
 8003abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ac2:	2b15      	cmp	r3, #21
 8003ac4:	d8f6      	bhi.n	8003ab4 <_printf_i+0x28>
 8003ac6:	a101      	add	r1, pc, #4	; (adr r1, 8003acc <_printf_i+0x40>)
 8003ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003acc:	08003b25 	.word	0x08003b25
 8003ad0:	08003b39 	.word	0x08003b39
 8003ad4:	08003ab5 	.word	0x08003ab5
 8003ad8:	08003ab5 	.word	0x08003ab5
 8003adc:	08003ab5 	.word	0x08003ab5
 8003ae0:	08003ab5 	.word	0x08003ab5
 8003ae4:	08003b39 	.word	0x08003b39
 8003ae8:	08003ab5 	.word	0x08003ab5
 8003aec:	08003ab5 	.word	0x08003ab5
 8003af0:	08003ab5 	.word	0x08003ab5
 8003af4:	08003ab5 	.word	0x08003ab5
 8003af8:	08003c45 	.word	0x08003c45
 8003afc:	08003b69 	.word	0x08003b69
 8003b00:	08003c27 	.word	0x08003c27
 8003b04:	08003ab5 	.word	0x08003ab5
 8003b08:	08003ab5 	.word	0x08003ab5
 8003b0c:	08003c67 	.word	0x08003c67
 8003b10:	08003ab5 	.word	0x08003ab5
 8003b14:	08003b69 	.word	0x08003b69
 8003b18:	08003ab5 	.word	0x08003ab5
 8003b1c:	08003ab5 	.word	0x08003ab5
 8003b20:	08003c2f 	.word	0x08003c2f
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	1d1a      	adds	r2, r3, #4
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	602a      	str	r2, [r5, #0]
 8003b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0a3      	b.n	8003c80 <_printf_i+0x1f4>
 8003b38:	6820      	ldr	r0, [r4, #0]
 8003b3a:	6829      	ldr	r1, [r5, #0]
 8003b3c:	0606      	lsls	r6, r0, #24
 8003b3e:	f101 0304 	add.w	r3, r1, #4
 8003b42:	d50a      	bpl.n	8003b5a <_printf_i+0xce>
 8003b44:	680e      	ldr	r6, [r1, #0]
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	2e00      	cmp	r6, #0
 8003b4a:	da03      	bge.n	8003b54 <_printf_i+0xc8>
 8003b4c:	232d      	movs	r3, #45	; 0x2d
 8003b4e:	4276      	negs	r6, r6
 8003b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b54:	485e      	ldr	r0, [pc, #376]	; (8003cd0 <_printf_i+0x244>)
 8003b56:	230a      	movs	r3, #10
 8003b58:	e019      	b.n	8003b8e <_printf_i+0x102>
 8003b5a:	680e      	ldr	r6, [r1, #0]
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b62:	bf18      	it	ne
 8003b64:	b236      	sxthne	r6, r6
 8003b66:	e7ef      	b.n	8003b48 <_printf_i+0xbc>
 8003b68:	682b      	ldr	r3, [r5, #0]
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	1d19      	adds	r1, r3, #4
 8003b6e:	6029      	str	r1, [r5, #0]
 8003b70:	0601      	lsls	r1, r0, #24
 8003b72:	d501      	bpl.n	8003b78 <_printf_i+0xec>
 8003b74:	681e      	ldr	r6, [r3, #0]
 8003b76:	e002      	b.n	8003b7e <_printf_i+0xf2>
 8003b78:	0646      	lsls	r6, r0, #25
 8003b7a:	d5fb      	bpl.n	8003b74 <_printf_i+0xe8>
 8003b7c:	881e      	ldrh	r6, [r3, #0]
 8003b7e:	4854      	ldr	r0, [pc, #336]	; (8003cd0 <_printf_i+0x244>)
 8003b80:	2f6f      	cmp	r7, #111	; 0x6f
 8003b82:	bf0c      	ite	eq
 8003b84:	2308      	moveq	r3, #8
 8003b86:	230a      	movne	r3, #10
 8003b88:	2100      	movs	r1, #0
 8003b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b8e:	6865      	ldr	r5, [r4, #4]
 8003b90:	60a5      	str	r5, [r4, #8]
 8003b92:	2d00      	cmp	r5, #0
 8003b94:	bfa2      	ittt	ge
 8003b96:	6821      	ldrge	r1, [r4, #0]
 8003b98:	f021 0104 	bicge.w	r1, r1, #4
 8003b9c:	6021      	strge	r1, [r4, #0]
 8003b9e:	b90e      	cbnz	r6, 8003ba4 <_printf_i+0x118>
 8003ba0:	2d00      	cmp	r5, #0
 8003ba2:	d04d      	beq.n	8003c40 <_printf_i+0x1b4>
 8003ba4:	4615      	mov	r5, r2
 8003ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003baa:	fb03 6711 	mls	r7, r3, r1, r6
 8003bae:	5dc7      	ldrb	r7, [r0, r7]
 8003bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bb4:	4637      	mov	r7, r6
 8003bb6:	42bb      	cmp	r3, r7
 8003bb8:	460e      	mov	r6, r1
 8003bba:	d9f4      	bls.n	8003ba6 <_printf_i+0x11a>
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d10b      	bne.n	8003bd8 <_printf_i+0x14c>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	07de      	lsls	r6, r3, #31
 8003bc4:	d508      	bpl.n	8003bd8 <_printf_i+0x14c>
 8003bc6:	6923      	ldr	r3, [r4, #16]
 8003bc8:	6861      	ldr	r1, [r4, #4]
 8003bca:	4299      	cmp	r1, r3
 8003bcc:	bfde      	ittt	le
 8003bce:	2330      	movle	r3, #48	; 0x30
 8003bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003bd8:	1b52      	subs	r2, r2, r5
 8003bda:	6122      	str	r2, [r4, #16]
 8003bdc:	f8cd a000 	str.w	sl, [sp]
 8003be0:	464b      	mov	r3, r9
 8003be2:	aa03      	add	r2, sp, #12
 8003be4:	4621      	mov	r1, r4
 8003be6:	4640      	mov	r0, r8
 8003be8:	f7ff fee2 	bl	80039b0 <_printf_common>
 8003bec:	3001      	adds	r0, #1
 8003bee:	d14c      	bne.n	8003c8a <_printf_i+0x1fe>
 8003bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf4:	b004      	add	sp, #16
 8003bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bfa:	4835      	ldr	r0, [pc, #212]	; (8003cd0 <_printf_i+0x244>)
 8003bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c00:	6829      	ldr	r1, [r5, #0]
 8003c02:	6823      	ldr	r3, [r4, #0]
 8003c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c08:	6029      	str	r1, [r5, #0]
 8003c0a:	061d      	lsls	r5, r3, #24
 8003c0c:	d514      	bpl.n	8003c38 <_printf_i+0x1ac>
 8003c0e:	07df      	lsls	r7, r3, #31
 8003c10:	bf44      	itt	mi
 8003c12:	f043 0320 	orrmi.w	r3, r3, #32
 8003c16:	6023      	strmi	r3, [r4, #0]
 8003c18:	b91e      	cbnz	r6, 8003c22 <_printf_i+0x196>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	f023 0320 	bic.w	r3, r3, #32
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	2310      	movs	r3, #16
 8003c24:	e7b0      	b.n	8003b88 <_printf_i+0xfc>
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	f043 0320 	orr.w	r3, r3, #32
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	2378      	movs	r3, #120	; 0x78
 8003c30:	4828      	ldr	r0, [pc, #160]	; (8003cd4 <_printf_i+0x248>)
 8003c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c36:	e7e3      	b.n	8003c00 <_printf_i+0x174>
 8003c38:	0659      	lsls	r1, r3, #25
 8003c3a:	bf48      	it	mi
 8003c3c:	b2b6      	uxthmi	r6, r6
 8003c3e:	e7e6      	b.n	8003c0e <_printf_i+0x182>
 8003c40:	4615      	mov	r5, r2
 8003c42:	e7bb      	b.n	8003bbc <_printf_i+0x130>
 8003c44:	682b      	ldr	r3, [r5, #0]
 8003c46:	6826      	ldr	r6, [r4, #0]
 8003c48:	6961      	ldr	r1, [r4, #20]
 8003c4a:	1d18      	adds	r0, r3, #4
 8003c4c:	6028      	str	r0, [r5, #0]
 8003c4e:	0635      	lsls	r5, r6, #24
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	d501      	bpl.n	8003c58 <_printf_i+0x1cc>
 8003c54:	6019      	str	r1, [r3, #0]
 8003c56:	e002      	b.n	8003c5e <_printf_i+0x1d2>
 8003c58:	0670      	lsls	r0, r6, #25
 8003c5a:	d5fb      	bpl.n	8003c54 <_printf_i+0x1c8>
 8003c5c:	8019      	strh	r1, [r3, #0]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	6123      	str	r3, [r4, #16]
 8003c62:	4615      	mov	r5, r2
 8003c64:	e7ba      	b.n	8003bdc <_printf_i+0x150>
 8003c66:	682b      	ldr	r3, [r5, #0]
 8003c68:	1d1a      	adds	r2, r3, #4
 8003c6a:	602a      	str	r2, [r5, #0]
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	6862      	ldr	r2, [r4, #4]
 8003c70:	2100      	movs	r1, #0
 8003c72:	4628      	mov	r0, r5
 8003c74:	f7fc fad4 	bl	8000220 <memchr>
 8003c78:	b108      	cbz	r0, 8003c7e <_printf_i+0x1f2>
 8003c7a:	1b40      	subs	r0, r0, r5
 8003c7c:	6060      	str	r0, [r4, #4]
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	6123      	str	r3, [r4, #16]
 8003c82:	2300      	movs	r3, #0
 8003c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c88:	e7a8      	b.n	8003bdc <_printf_i+0x150>
 8003c8a:	6923      	ldr	r3, [r4, #16]
 8003c8c:	462a      	mov	r2, r5
 8003c8e:	4649      	mov	r1, r9
 8003c90:	4640      	mov	r0, r8
 8003c92:	47d0      	blx	sl
 8003c94:	3001      	adds	r0, #1
 8003c96:	d0ab      	beq.n	8003bf0 <_printf_i+0x164>
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	079b      	lsls	r3, r3, #30
 8003c9c:	d413      	bmi.n	8003cc6 <_printf_i+0x23a>
 8003c9e:	68e0      	ldr	r0, [r4, #12]
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	4298      	cmp	r0, r3
 8003ca4:	bfb8      	it	lt
 8003ca6:	4618      	movlt	r0, r3
 8003ca8:	e7a4      	b.n	8003bf4 <_printf_i+0x168>
 8003caa:	2301      	movs	r3, #1
 8003cac:	4632      	mov	r2, r6
 8003cae:	4649      	mov	r1, r9
 8003cb0:	4640      	mov	r0, r8
 8003cb2:	47d0      	blx	sl
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	d09b      	beq.n	8003bf0 <_printf_i+0x164>
 8003cb8:	3501      	adds	r5, #1
 8003cba:	68e3      	ldr	r3, [r4, #12]
 8003cbc:	9903      	ldr	r1, [sp, #12]
 8003cbe:	1a5b      	subs	r3, r3, r1
 8003cc0:	42ab      	cmp	r3, r5
 8003cc2:	dcf2      	bgt.n	8003caa <_printf_i+0x21e>
 8003cc4:	e7eb      	b.n	8003c9e <_printf_i+0x212>
 8003cc6:	2500      	movs	r5, #0
 8003cc8:	f104 0619 	add.w	r6, r4, #25
 8003ccc:	e7f5      	b.n	8003cba <_printf_i+0x22e>
 8003cce:	bf00      	nop
 8003cd0:	0800458d 	.word	0x0800458d
 8003cd4:	0800459e 	.word	0x0800459e

08003cd8 <_sbrk_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4d06      	ldr	r5, [pc, #24]	; (8003cf4 <_sbrk_r+0x1c>)
 8003cdc:	2300      	movs	r3, #0
 8003cde:	4604      	mov	r4, r0
 8003ce0:	4608      	mov	r0, r1
 8003ce2:	602b      	str	r3, [r5, #0]
 8003ce4:	f7fc fee6 	bl	8000ab4 <_sbrk>
 8003ce8:	1c43      	adds	r3, r0, #1
 8003cea:	d102      	bne.n	8003cf2 <_sbrk_r+0x1a>
 8003cec:	682b      	ldr	r3, [r5, #0]
 8003cee:	b103      	cbz	r3, 8003cf2 <_sbrk_r+0x1a>
 8003cf0:	6023      	str	r3, [r4, #0]
 8003cf2:	bd38      	pop	{r3, r4, r5, pc}
 8003cf4:	20000160 	.word	0x20000160

08003cf8 <__sread>:
 8003cf8:	b510      	push	{r4, lr}
 8003cfa:	460c      	mov	r4, r1
 8003cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d00:	f000 fa6e 	bl	80041e0 <_read_r>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	bfab      	itete	ge
 8003d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8003d0c:	181b      	addge	r3, r3, r0
 8003d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003d12:	bfac      	ite	ge
 8003d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8003d16:	81a3      	strhlt	r3, [r4, #12]
 8003d18:	bd10      	pop	{r4, pc}

08003d1a <__swrite>:
 8003d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1e:	461f      	mov	r7, r3
 8003d20:	898b      	ldrh	r3, [r1, #12]
 8003d22:	05db      	lsls	r3, r3, #23
 8003d24:	4605      	mov	r5, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4616      	mov	r6, r2
 8003d2a:	d505      	bpl.n	8003d38 <__swrite+0x1e>
 8003d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d30:	2302      	movs	r3, #2
 8003d32:	2200      	movs	r2, #0
 8003d34:	f000 f9d0 	bl	80040d8 <_lseek_r>
 8003d38:	89a3      	ldrh	r3, [r4, #12]
 8003d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	4632      	mov	r2, r6
 8003d46:	463b      	mov	r3, r7
 8003d48:	4628      	mov	r0, r5
 8003d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d4e:	f000 b869 	b.w	8003e24 <_write_r>

08003d52 <__sseek>:
 8003d52:	b510      	push	{r4, lr}
 8003d54:	460c      	mov	r4, r1
 8003d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d5a:	f000 f9bd 	bl	80040d8 <_lseek_r>
 8003d5e:	1c43      	adds	r3, r0, #1
 8003d60:	89a3      	ldrh	r3, [r4, #12]
 8003d62:	bf15      	itete	ne
 8003d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d6e:	81a3      	strheq	r3, [r4, #12]
 8003d70:	bf18      	it	ne
 8003d72:	81a3      	strhne	r3, [r4, #12]
 8003d74:	bd10      	pop	{r4, pc}

08003d76 <__sclose>:
 8003d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d7a:	f000 b8db 	b.w	8003f34 <_close_r>
	...

08003d80 <__swbuf_r>:
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d82:	460e      	mov	r6, r1
 8003d84:	4614      	mov	r4, r2
 8003d86:	4605      	mov	r5, r0
 8003d88:	b118      	cbz	r0, 8003d92 <__swbuf_r+0x12>
 8003d8a:	6983      	ldr	r3, [r0, #24]
 8003d8c:	b90b      	cbnz	r3, 8003d92 <__swbuf_r+0x12>
 8003d8e:	f7ff fb07 	bl	80033a0 <__sinit>
 8003d92:	4b21      	ldr	r3, [pc, #132]	; (8003e18 <__swbuf_r+0x98>)
 8003d94:	429c      	cmp	r4, r3
 8003d96:	d12b      	bne.n	8003df0 <__swbuf_r+0x70>
 8003d98:	686c      	ldr	r4, [r5, #4]
 8003d9a:	69a3      	ldr	r3, [r4, #24]
 8003d9c:	60a3      	str	r3, [r4, #8]
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	071a      	lsls	r2, r3, #28
 8003da2:	d52f      	bpl.n	8003e04 <__swbuf_r+0x84>
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	b36b      	cbz	r3, 8003e04 <__swbuf_r+0x84>
 8003da8:	6923      	ldr	r3, [r4, #16]
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	1ac0      	subs	r0, r0, r3
 8003dae:	6963      	ldr	r3, [r4, #20]
 8003db0:	b2f6      	uxtb	r6, r6
 8003db2:	4283      	cmp	r3, r0
 8003db4:	4637      	mov	r7, r6
 8003db6:	dc04      	bgt.n	8003dc2 <__swbuf_r+0x42>
 8003db8:	4621      	mov	r1, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f950 	bl	8004060 <_fflush_r>
 8003dc0:	bb30      	cbnz	r0, 8003e10 <__swbuf_r+0x90>
 8003dc2:	68a3      	ldr	r3, [r4, #8]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	60a3      	str	r3, [r4, #8]
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	6022      	str	r2, [r4, #0]
 8003dce:	701e      	strb	r6, [r3, #0]
 8003dd0:	6963      	ldr	r3, [r4, #20]
 8003dd2:	3001      	adds	r0, #1
 8003dd4:	4283      	cmp	r3, r0
 8003dd6:	d004      	beq.n	8003de2 <__swbuf_r+0x62>
 8003dd8:	89a3      	ldrh	r3, [r4, #12]
 8003dda:	07db      	lsls	r3, r3, #31
 8003ddc:	d506      	bpl.n	8003dec <__swbuf_r+0x6c>
 8003dde:	2e0a      	cmp	r6, #10
 8003de0:	d104      	bne.n	8003dec <__swbuf_r+0x6c>
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f000 f93b 	bl	8004060 <_fflush_r>
 8003dea:	b988      	cbnz	r0, 8003e10 <__swbuf_r+0x90>
 8003dec:	4638      	mov	r0, r7
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <__swbuf_r+0x9c>)
 8003df2:	429c      	cmp	r4, r3
 8003df4:	d101      	bne.n	8003dfa <__swbuf_r+0x7a>
 8003df6:	68ac      	ldr	r4, [r5, #8]
 8003df8:	e7cf      	b.n	8003d9a <__swbuf_r+0x1a>
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <__swbuf_r+0xa0>)
 8003dfc:	429c      	cmp	r4, r3
 8003dfe:	bf08      	it	eq
 8003e00:	68ec      	ldreq	r4, [r5, #12]
 8003e02:	e7ca      	b.n	8003d9a <__swbuf_r+0x1a>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4628      	mov	r0, r5
 8003e08:	f000 f81e 	bl	8003e48 <__swsetup_r>
 8003e0c:	2800      	cmp	r0, #0
 8003e0e:	d0cb      	beq.n	8003da8 <__swbuf_r+0x28>
 8003e10:	f04f 37ff 	mov.w	r7, #4294967295
 8003e14:	e7ea      	b.n	8003dec <__swbuf_r+0x6c>
 8003e16:	bf00      	nop
 8003e18:	0800453c 	.word	0x0800453c
 8003e1c:	0800455c 	.word	0x0800455c
 8003e20:	0800451c 	.word	0x0800451c

08003e24 <_write_r>:
 8003e24:	b538      	push	{r3, r4, r5, lr}
 8003e26:	4d07      	ldr	r5, [pc, #28]	; (8003e44 <_write_r+0x20>)
 8003e28:	4604      	mov	r4, r0
 8003e2a:	4608      	mov	r0, r1
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	2200      	movs	r2, #0
 8003e30:	602a      	str	r2, [r5, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f7fc fbf8 	bl	8000628 <_write>
 8003e38:	1c43      	adds	r3, r0, #1
 8003e3a:	d102      	bne.n	8003e42 <_write_r+0x1e>
 8003e3c:	682b      	ldr	r3, [r5, #0]
 8003e3e:	b103      	cbz	r3, 8003e42 <_write_r+0x1e>
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	bd38      	pop	{r3, r4, r5, pc}
 8003e44:	20000160 	.word	0x20000160

08003e48 <__swsetup_r>:
 8003e48:	4b32      	ldr	r3, [pc, #200]	; (8003f14 <__swsetup_r+0xcc>)
 8003e4a:	b570      	push	{r4, r5, r6, lr}
 8003e4c:	681d      	ldr	r5, [r3, #0]
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460c      	mov	r4, r1
 8003e52:	b125      	cbz	r5, 8003e5e <__swsetup_r+0x16>
 8003e54:	69ab      	ldr	r3, [r5, #24]
 8003e56:	b913      	cbnz	r3, 8003e5e <__swsetup_r+0x16>
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f7ff faa1 	bl	80033a0 <__sinit>
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	; (8003f18 <__swsetup_r+0xd0>)
 8003e60:	429c      	cmp	r4, r3
 8003e62:	d10f      	bne.n	8003e84 <__swsetup_r+0x3c>
 8003e64:	686c      	ldr	r4, [r5, #4]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e6c:	0719      	lsls	r1, r3, #28
 8003e6e:	d42c      	bmi.n	8003eca <__swsetup_r+0x82>
 8003e70:	06dd      	lsls	r5, r3, #27
 8003e72:	d411      	bmi.n	8003e98 <__swsetup_r+0x50>
 8003e74:	2309      	movs	r3, #9
 8003e76:	6033      	str	r3, [r6, #0]
 8003e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e82:	e03e      	b.n	8003f02 <__swsetup_r+0xba>
 8003e84:	4b25      	ldr	r3, [pc, #148]	; (8003f1c <__swsetup_r+0xd4>)
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d101      	bne.n	8003e8e <__swsetup_r+0x46>
 8003e8a:	68ac      	ldr	r4, [r5, #8]
 8003e8c:	e7eb      	b.n	8003e66 <__swsetup_r+0x1e>
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <__swsetup_r+0xd8>)
 8003e90:	429c      	cmp	r4, r3
 8003e92:	bf08      	it	eq
 8003e94:	68ec      	ldreq	r4, [r5, #12]
 8003e96:	e7e6      	b.n	8003e66 <__swsetup_r+0x1e>
 8003e98:	0758      	lsls	r0, r3, #29
 8003e9a:	d512      	bpl.n	8003ec2 <__swsetup_r+0x7a>
 8003e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9e:	b141      	cbz	r1, 8003eb2 <__swsetup_r+0x6a>
 8003ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ea4:	4299      	cmp	r1, r3
 8003ea6:	d002      	beq.n	8003eae <__swsetup_r+0x66>
 8003ea8:	4630      	mov	r0, r6
 8003eaa:	f7ff fb47 	bl	800353c <_free_r>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8003eb2:	89a3      	ldrh	r3, [r4, #12]
 8003eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003eb8:	81a3      	strh	r3, [r4, #12]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	6063      	str	r3, [r4, #4]
 8003ebe:	6923      	ldr	r3, [r4, #16]
 8003ec0:	6023      	str	r3, [r4, #0]
 8003ec2:	89a3      	ldrh	r3, [r4, #12]
 8003ec4:	f043 0308 	orr.w	r3, r3, #8
 8003ec8:	81a3      	strh	r3, [r4, #12]
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	b94b      	cbnz	r3, 8003ee2 <__swsetup_r+0x9a>
 8003ece:	89a3      	ldrh	r3, [r4, #12]
 8003ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed8:	d003      	beq.n	8003ee2 <__swsetup_r+0x9a>
 8003eda:	4621      	mov	r1, r4
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f933 	bl	8004148 <__smakebuf_r>
 8003ee2:	89a0      	ldrh	r0, [r4, #12]
 8003ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ee8:	f010 0301 	ands.w	r3, r0, #1
 8003eec:	d00a      	beq.n	8003f04 <__swsetup_r+0xbc>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	6963      	ldr	r3, [r4, #20]
 8003ef4:	425b      	negs	r3, r3
 8003ef6:	61a3      	str	r3, [r4, #24]
 8003ef8:	6923      	ldr	r3, [r4, #16]
 8003efa:	b943      	cbnz	r3, 8003f0e <__swsetup_r+0xc6>
 8003efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f00:	d1ba      	bne.n	8003e78 <__swsetup_r+0x30>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	0781      	lsls	r1, r0, #30
 8003f06:	bf58      	it	pl
 8003f08:	6963      	ldrpl	r3, [r4, #20]
 8003f0a:	60a3      	str	r3, [r4, #8]
 8003f0c:	e7f4      	b.n	8003ef8 <__swsetup_r+0xb0>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e7f7      	b.n	8003f02 <__swsetup_r+0xba>
 8003f12:	bf00      	nop
 8003f14:	2000000c 	.word	0x2000000c
 8003f18:	0800453c 	.word	0x0800453c
 8003f1c:	0800455c 	.word	0x0800455c
 8003f20:	0800451c 	.word	0x0800451c

08003f24 <abort>:
 8003f24:	b508      	push	{r3, lr}
 8003f26:	2006      	movs	r0, #6
 8003f28:	f000 f994 	bl	8004254 <raise>
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f7fc fd65 	bl	80009fc <_exit>
	...

08003f34 <_close_r>:
 8003f34:	b538      	push	{r3, r4, r5, lr}
 8003f36:	4d06      	ldr	r5, [pc, #24]	; (8003f50 <_close_r+0x1c>)
 8003f38:	2300      	movs	r3, #0
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	f7fc fd83 	bl	8000a4a <_close>
 8003f44:	1c43      	adds	r3, r0, #1
 8003f46:	d102      	bne.n	8003f4e <_close_r+0x1a>
 8003f48:	682b      	ldr	r3, [r5, #0]
 8003f4a:	b103      	cbz	r3, 8003f4e <_close_r+0x1a>
 8003f4c:	6023      	str	r3, [r4, #0]
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20000160 	.word	0x20000160

08003f54 <__sflush_r>:
 8003f54:	898a      	ldrh	r2, [r1, #12]
 8003f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	0710      	lsls	r0, r2, #28
 8003f5e:	460c      	mov	r4, r1
 8003f60:	d458      	bmi.n	8004014 <__sflush_r+0xc0>
 8003f62:	684b      	ldr	r3, [r1, #4]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	dc05      	bgt.n	8003f74 <__sflush_r+0x20>
 8003f68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	dc02      	bgt.n	8003f74 <__sflush_r+0x20>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f76:	2e00      	cmp	r6, #0
 8003f78:	d0f9      	beq.n	8003f6e <__sflush_r+0x1a>
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f80:	682f      	ldr	r7, [r5, #0]
 8003f82:	602b      	str	r3, [r5, #0]
 8003f84:	d032      	beq.n	8003fec <__sflush_r+0x98>
 8003f86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	075a      	lsls	r2, r3, #29
 8003f8c:	d505      	bpl.n	8003f9a <__sflush_r+0x46>
 8003f8e:	6863      	ldr	r3, [r4, #4]
 8003f90:	1ac0      	subs	r0, r0, r3
 8003f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f94:	b10b      	cbz	r3, 8003f9a <__sflush_r+0x46>
 8003f96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f98:	1ac0      	subs	r0, r0, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa0:	6a21      	ldr	r1, [r4, #32]
 8003fa2:	4628      	mov	r0, r5
 8003fa4:	47b0      	blx	r6
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	89a3      	ldrh	r3, [r4, #12]
 8003faa:	d106      	bne.n	8003fba <__sflush_r+0x66>
 8003fac:	6829      	ldr	r1, [r5, #0]
 8003fae:	291d      	cmp	r1, #29
 8003fb0:	d82c      	bhi.n	800400c <__sflush_r+0xb8>
 8003fb2:	4a2a      	ldr	r2, [pc, #168]	; (800405c <__sflush_r+0x108>)
 8003fb4:	40ca      	lsrs	r2, r1
 8003fb6:	07d6      	lsls	r6, r2, #31
 8003fb8:	d528      	bpl.n	800400c <__sflush_r+0xb8>
 8003fba:	2200      	movs	r2, #0
 8003fbc:	6062      	str	r2, [r4, #4]
 8003fbe:	04d9      	lsls	r1, r3, #19
 8003fc0:	6922      	ldr	r2, [r4, #16]
 8003fc2:	6022      	str	r2, [r4, #0]
 8003fc4:	d504      	bpl.n	8003fd0 <__sflush_r+0x7c>
 8003fc6:	1c42      	adds	r2, r0, #1
 8003fc8:	d101      	bne.n	8003fce <__sflush_r+0x7a>
 8003fca:	682b      	ldr	r3, [r5, #0]
 8003fcc:	b903      	cbnz	r3, 8003fd0 <__sflush_r+0x7c>
 8003fce:	6560      	str	r0, [r4, #84]	; 0x54
 8003fd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fd2:	602f      	str	r7, [r5, #0]
 8003fd4:	2900      	cmp	r1, #0
 8003fd6:	d0ca      	beq.n	8003f6e <__sflush_r+0x1a>
 8003fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	d002      	beq.n	8003fe6 <__sflush_r+0x92>
 8003fe0:	4628      	mov	r0, r5
 8003fe2:	f7ff faab 	bl	800353c <_free_r>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	6360      	str	r0, [r4, #52]	; 0x34
 8003fea:	e7c1      	b.n	8003f70 <__sflush_r+0x1c>
 8003fec:	6a21      	ldr	r1, [r4, #32]
 8003fee:	2301      	movs	r3, #1
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	47b0      	blx	r6
 8003ff4:	1c41      	adds	r1, r0, #1
 8003ff6:	d1c7      	bne.n	8003f88 <__sflush_r+0x34>
 8003ff8:	682b      	ldr	r3, [r5, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0c4      	beq.n	8003f88 <__sflush_r+0x34>
 8003ffe:	2b1d      	cmp	r3, #29
 8004000:	d001      	beq.n	8004006 <__sflush_r+0xb2>
 8004002:	2b16      	cmp	r3, #22
 8004004:	d101      	bne.n	800400a <__sflush_r+0xb6>
 8004006:	602f      	str	r7, [r5, #0]
 8004008:	e7b1      	b.n	8003f6e <__sflush_r+0x1a>
 800400a:	89a3      	ldrh	r3, [r4, #12]
 800400c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004010:	81a3      	strh	r3, [r4, #12]
 8004012:	e7ad      	b.n	8003f70 <__sflush_r+0x1c>
 8004014:	690f      	ldr	r7, [r1, #16]
 8004016:	2f00      	cmp	r7, #0
 8004018:	d0a9      	beq.n	8003f6e <__sflush_r+0x1a>
 800401a:	0793      	lsls	r3, r2, #30
 800401c:	680e      	ldr	r6, [r1, #0]
 800401e:	bf08      	it	eq
 8004020:	694b      	ldreq	r3, [r1, #20]
 8004022:	600f      	str	r7, [r1, #0]
 8004024:	bf18      	it	ne
 8004026:	2300      	movne	r3, #0
 8004028:	eba6 0807 	sub.w	r8, r6, r7
 800402c:	608b      	str	r3, [r1, #8]
 800402e:	f1b8 0f00 	cmp.w	r8, #0
 8004032:	dd9c      	ble.n	8003f6e <__sflush_r+0x1a>
 8004034:	6a21      	ldr	r1, [r4, #32]
 8004036:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004038:	4643      	mov	r3, r8
 800403a:	463a      	mov	r2, r7
 800403c:	4628      	mov	r0, r5
 800403e:	47b0      	blx	r6
 8004040:	2800      	cmp	r0, #0
 8004042:	dc06      	bgt.n	8004052 <__sflush_r+0xfe>
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	e78e      	b.n	8003f70 <__sflush_r+0x1c>
 8004052:	4407      	add	r7, r0
 8004054:	eba8 0800 	sub.w	r8, r8, r0
 8004058:	e7e9      	b.n	800402e <__sflush_r+0xda>
 800405a:	bf00      	nop
 800405c:	20400001 	.word	0x20400001

08004060 <_fflush_r>:
 8004060:	b538      	push	{r3, r4, r5, lr}
 8004062:	690b      	ldr	r3, [r1, #16]
 8004064:	4605      	mov	r5, r0
 8004066:	460c      	mov	r4, r1
 8004068:	b913      	cbnz	r3, 8004070 <_fflush_r+0x10>
 800406a:	2500      	movs	r5, #0
 800406c:	4628      	mov	r0, r5
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	b118      	cbz	r0, 800407a <_fflush_r+0x1a>
 8004072:	6983      	ldr	r3, [r0, #24]
 8004074:	b90b      	cbnz	r3, 800407a <_fflush_r+0x1a>
 8004076:	f7ff f993 	bl	80033a0 <__sinit>
 800407a:	4b14      	ldr	r3, [pc, #80]	; (80040cc <_fflush_r+0x6c>)
 800407c:	429c      	cmp	r4, r3
 800407e:	d11b      	bne.n	80040b8 <_fflush_r+0x58>
 8004080:	686c      	ldr	r4, [r5, #4]
 8004082:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ef      	beq.n	800406a <_fflush_r+0xa>
 800408a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800408c:	07d0      	lsls	r0, r2, #31
 800408e:	d404      	bmi.n	800409a <_fflush_r+0x3a>
 8004090:	0599      	lsls	r1, r3, #22
 8004092:	d402      	bmi.n	800409a <_fflush_r+0x3a>
 8004094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004096:	f7ff fa46 	bl	8003526 <__retarget_lock_acquire_recursive>
 800409a:	4628      	mov	r0, r5
 800409c:	4621      	mov	r1, r4
 800409e:	f7ff ff59 	bl	8003f54 <__sflush_r>
 80040a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040a4:	07da      	lsls	r2, r3, #31
 80040a6:	4605      	mov	r5, r0
 80040a8:	d4e0      	bmi.n	800406c <_fflush_r+0xc>
 80040aa:	89a3      	ldrh	r3, [r4, #12]
 80040ac:	059b      	lsls	r3, r3, #22
 80040ae:	d4dd      	bmi.n	800406c <_fflush_r+0xc>
 80040b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040b2:	f7ff fa39 	bl	8003528 <__retarget_lock_release_recursive>
 80040b6:	e7d9      	b.n	800406c <_fflush_r+0xc>
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <_fflush_r+0x70>)
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d101      	bne.n	80040c2 <_fflush_r+0x62>
 80040be:	68ac      	ldr	r4, [r5, #8]
 80040c0:	e7df      	b.n	8004082 <_fflush_r+0x22>
 80040c2:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <_fflush_r+0x74>)
 80040c4:	429c      	cmp	r4, r3
 80040c6:	bf08      	it	eq
 80040c8:	68ec      	ldreq	r4, [r5, #12]
 80040ca:	e7da      	b.n	8004082 <_fflush_r+0x22>
 80040cc:	0800453c 	.word	0x0800453c
 80040d0:	0800455c 	.word	0x0800455c
 80040d4:	0800451c 	.word	0x0800451c

080040d8 <_lseek_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4d07      	ldr	r5, [pc, #28]	; (80040f8 <_lseek_r+0x20>)
 80040dc:	4604      	mov	r4, r0
 80040de:	4608      	mov	r0, r1
 80040e0:	4611      	mov	r1, r2
 80040e2:	2200      	movs	r2, #0
 80040e4:	602a      	str	r2, [r5, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	f7fc fcd6 	bl	8000a98 <_lseek>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_lseek_r+0x1e>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_lseek_r+0x1e>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000160 	.word	0x20000160

080040fc <__swhatbuf_r>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	460e      	mov	r6, r1
 8004100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004104:	2900      	cmp	r1, #0
 8004106:	b096      	sub	sp, #88	; 0x58
 8004108:	4614      	mov	r4, r2
 800410a:	461d      	mov	r5, r3
 800410c:	da08      	bge.n	8004120 <__swhatbuf_r+0x24>
 800410e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	602a      	str	r2, [r5, #0]
 8004116:	061a      	lsls	r2, r3, #24
 8004118:	d410      	bmi.n	800413c <__swhatbuf_r+0x40>
 800411a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800411e:	e00e      	b.n	800413e <__swhatbuf_r+0x42>
 8004120:	466a      	mov	r2, sp
 8004122:	f000 f8b3 	bl	800428c <_fstat_r>
 8004126:	2800      	cmp	r0, #0
 8004128:	dbf1      	blt.n	800410e <__swhatbuf_r+0x12>
 800412a:	9a01      	ldr	r2, [sp, #4]
 800412c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004130:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004134:	425a      	negs	r2, r3
 8004136:	415a      	adcs	r2, r3
 8004138:	602a      	str	r2, [r5, #0]
 800413a:	e7ee      	b.n	800411a <__swhatbuf_r+0x1e>
 800413c:	2340      	movs	r3, #64	; 0x40
 800413e:	2000      	movs	r0, #0
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	b016      	add	sp, #88	; 0x58
 8004144:	bd70      	pop	{r4, r5, r6, pc}
	...

08004148 <__smakebuf_r>:
 8004148:	898b      	ldrh	r3, [r1, #12]
 800414a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800414c:	079d      	lsls	r5, r3, #30
 800414e:	4606      	mov	r6, r0
 8004150:	460c      	mov	r4, r1
 8004152:	d507      	bpl.n	8004164 <__smakebuf_r+0x1c>
 8004154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	2301      	movs	r3, #1
 800415e:	6163      	str	r3, [r4, #20]
 8004160:	b002      	add	sp, #8
 8004162:	bd70      	pop	{r4, r5, r6, pc}
 8004164:	ab01      	add	r3, sp, #4
 8004166:	466a      	mov	r2, sp
 8004168:	f7ff ffc8 	bl	80040fc <__swhatbuf_r>
 800416c:	9900      	ldr	r1, [sp, #0]
 800416e:	4605      	mov	r5, r0
 8004170:	4630      	mov	r0, r6
 8004172:	f7ff fa4f 	bl	8003614 <_malloc_r>
 8004176:	b948      	cbnz	r0, 800418c <__smakebuf_r+0x44>
 8004178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800417c:	059a      	lsls	r2, r3, #22
 800417e:	d4ef      	bmi.n	8004160 <__smakebuf_r+0x18>
 8004180:	f023 0303 	bic.w	r3, r3, #3
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	81a3      	strh	r3, [r4, #12]
 800418a:	e7e3      	b.n	8004154 <__smakebuf_r+0xc>
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <__smakebuf_r+0x7c>)
 800418e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	6020      	str	r0, [r4, #0]
 8004194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004198:	81a3      	strh	r3, [r4, #12]
 800419a:	9b00      	ldr	r3, [sp, #0]
 800419c:	6163      	str	r3, [r4, #20]
 800419e:	9b01      	ldr	r3, [sp, #4]
 80041a0:	6120      	str	r0, [r4, #16]
 80041a2:	b15b      	cbz	r3, 80041bc <__smakebuf_r+0x74>
 80041a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a8:	4630      	mov	r0, r6
 80041aa:	f000 f881 	bl	80042b0 <_isatty_r>
 80041ae:	b128      	cbz	r0, 80041bc <__smakebuf_r+0x74>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	89a0      	ldrh	r0, [r4, #12]
 80041be:	4305      	orrs	r5, r0
 80041c0:	81a5      	strh	r5, [r4, #12]
 80041c2:	e7cd      	b.n	8004160 <__smakebuf_r+0x18>
 80041c4:	08003339 	.word	0x08003339

080041c8 <__malloc_lock>:
 80041c8:	4801      	ldr	r0, [pc, #4]	; (80041d0 <__malloc_lock+0x8>)
 80041ca:	f7ff b9ac 	b.w	8003526 <__retarget_lock_acquire_recursive>
 80041ce:	bf00      	nop
 80041d0:	20000154 	.word	0x20000154

080041d4 <__malloc_unlock>:
 80041d4:	4801      	ldr	r0, [pc, #4]	; (80041dc <__malloc_unlock+0x8>)
 80041d6:	f7ff b9a7 	b.w	8003528 <__retarget_lock_release_recursive>
 80041da:	bf00      	nop
 80041dc:	20000154 	.word	0x20000154

080041e0 <_read_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4d07      	ldr	r5, [pc, #28]	; (8004200 <_read_r+0x20>)
 80041e4:	4604      	mov	r4, r0
 80041e6:	4608      	mov	r0, r1
 80041e8:	4611      	mov	r1, r2
 80041ea:	2200      	movs	r2, #0
 80041ec:	602a      	str	r2, [r5, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	f7fc fc0e 	bl	8000a10 <_read>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_read_r+0x1e>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_read_r+0x1e>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	20000160 	.word	0x20000160

08004204 <_raise_r>:
 8004204:	291f      	cmp	r1, #31
 8004206:	b538      	push	{r3, r4, r5, lr}
 8004208:	4604      	mov	r4, r0
 800420a:	460d      	mov	r5, r1
 800420c:	d904      	bls.n	8004218 <_raise_r+0x14>
 800420e:	2316      	movs	r3, #22
 8004210:	6003      	str	r3, [r0, #0]
 8004212:	f04f 30ff 	mov.w	r0, #4294967295
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800421a:	b112      	cbz	r2, 8004222 <_raise_r+0x1e>
 800421c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004220:	b94b      	cbnz	r3, 8004236 <_raise_r+0x32>
 8004222:	4620      	mov	r0, r4
 8004224:	f000 f830 	bl	8004288 <_getpid_r>
 8004228:	462a      	mov	r2, r5
 800422a:	4601      	mov	r1, r0
 800422c:	4620      	mov	r0, r4
 800422e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004232:	f000 b817 	b.w	8004264 <_kill_r>
 8004236:	2b01      	cmp	r3, #1
 8004238:	d00a      	beq.n	8004250 <_raise_r+0x4c>
 800423a:	1c59      	adds	r1, r3, #1
 800423c:	d103      	bne.n	8004246 <_raise_r+0x42>
 800423e:	2316      	movs	r3, #22
 8004240:	6003      	str	r3, [r0, #0]
 8004242:	2001      	movs	r0, #1
 8004244:	e7e7      	b.n	8004216 <_raise_r+0x12>
 8004246:	2400      	movs	r4, #0
 8004248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800424c:	4628      	mov	r0, r5
 800424e:	4798      	blx	r3
 8004250:	2000      	movs	r0, #0
 8004252:	e7e0      	b.n	8004216 <_raise_r+0x12>

08004254 <raise>:
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <raise+0xc>)
 8004256:	4601      	mov	r1, r0
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	f7ff bfd3 	b.w	8004204 <_raise_r>
 800425e:	bf00      	nop
 8004260:	2000000c 	.word	0x2000000c

08004264 <_kill_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4d07      	ldr	r5, [pc, #28]	; (8004284 <_kill_r+0x20>)
 8004268:	2300      	movs	r3, #0
 800426a:	4604      	mov	r4, r0
 800426c:	4608      	mov	r0, r1
 800426e:	4611      	mov	r1, r2
 8004270:	602b      	str	r3, [r5, #0]
 8004272:	f7fc fbb3 	bl	80009dc <_kill>
 8004276:	1c43      	adds	r3, r0, #1
 8004278:	d102      	bne.n	8004280 <_kill_r+0x1c>
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	b103      	cbz	r3, 8004280 <_kill_r+0x1c>
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	bd38      	pop	{r3, r4, r5, pc}
 8004282:	bf00      	nop
 8004284:	20000160 	.word	0x20000160

08004288 <_getpid_r>:
 8004288:	f7fc bba0 	b.w	80009cc <_getpid>

0800428c <_fstat_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4d07      	ldr	r5, [pc, #28]	; (80042ac <_fstat_r+0x20>)
 8004290:	2300      	movs	r3, #0
 8004292:	4604      	mov	r4, r0
 8004294:	4608      	mov	r0, r1
 8004296:	4611      	mov	r1, r2
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	f7fc fbe2 	bl	8000a62 <_fstat>
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	d102      	bne.n	80042a8 <_fstat_r+0x1c>
 80042a2:	682b      	ldr	r3, [r5, #0]
 80042a4:	b103      	cbz	r3, 80042a8 <_fstat_r+0x1c>
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	bd38      	pop	{r3, r4, r5, pc}
 80042aa:	bf00      	nop
 80042ac:	20000160 	.word	0x20000160

080042b0 <_isatty_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4d06      	ldr	r5, [pc, #24]	; (80042cc <_isatty_r+0x1c>)
 80042b4:	2300      	movs	r3, #0
 80042b6:	4604      	mov	r4, r0
 80042b8:	4608      	mov	r0, r1
 80042ba:	602b      	str	r3, [r5, #0]
 80042bc:	f7fc fbe1 	bl	8000a82 <_isatty>
 80042c0:	1c43      	adds	r3, r0, #1
 80042c2:	d102      	bne.n	80042ca <_isatty_r+0x1a>
 80042c4:	682b      	ldr	r3, [r5, #0]
 80042c6:	b103      	cbz	r3, 80042ca <_isatty_r+0x1a>
 80042c8:	6023      	str	r3, [r4, #0]
 80042ca:	bd38      	pop	{r3, r4, r5, pc}
 80042cc:	20000160 	.word	0x20000160

080042d0 <_gettimeofday>:
 80042d0:	4b02      	ldr	r3, [pc, #8]	; (80042dc <_gettimeofday+0xc>)
 80042d2:	2258      	movs	r2, #88	; 0x58
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f04f 30ff 	mov.w	r0, #4294967295
 80042da:	4770      	bx	lr
 80042dc:	20000160 	.word	0x20000160

080042e0 <_init>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	bf00      	nop
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr

080042ec <_fini>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr
